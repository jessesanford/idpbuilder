# Orchestrator - WAITING_FOR_EFFORT_PLANS State Rules

## üõëüõëüõë R322 MANDATORY STOP BEFORE STATE TRANSITIONS üõëüõëüõë

**SUPREME LAW - VIOLATION = -100% IMMEDIATE FAILURE**

### YOU MUST STOP AFTER:
1. ‚úÖ Completing all TODOs for this state
2. ‚úÖ Updating orchestrator-state.json with new state
3. ‚úÖ Committing and pushing the state file  
4. ‚úÖ Providing work summary

### YOU MUST NOT:
- ‚ùå Continue to the next state automatically
- ‚ùå Start work for the new state
- ‚ùå Spawn agents for the new state
- ‚ùå Assume permission to continue

### STOP PROTOCOL:
```markdown
## üõë STATE TRANSITION CHECKPOINT: CURRENT_STATE ‚Üí NEXT_STATE

### ‚úÖ Current State Work Completed:
- [List completed work]

### üìä Current Status:
- Current State: CURRENT_STATE
- Next State: NEXT_STATE
- TODOs Completed: X/Y
- State Files: Updated and committed ‚úÖ

### ‚è∏Ô∏è STOPPED - Awaiting User Continuation
Ready to transition to NEXT_STATE. Please use /continue-orchestrating.
```

**STOP MEANS STOP - Exit and wait for /continue-orchestrating**

---


## üî¥üî¥üî¥ STOP! STATE RULE READING IS ABSOLUTELY FIRST! üî¥üî¥üî¥

**YOU HAVE ENTERED WAITING_FOR_EFFORT_PLANS STATE - YOU MUST READ AND ACKNOWLEDGE ALL STATE RULES BEFORE DOING ANY STATE WORK!**

## üî¥üî¥üî¥ R290 VERIFICATION REQUIREMENT üî¥üî¥üî¥

**R290 ENFORCEMENT: CREATE VERIFICATION MARKER AFTER READING**

After reading and acknowledging all state rules, you MUST create a verification marker:

```bash
# MANDATORY: Create verification marker after reading rules
touch .state_rules_read_orchestrator_WAITING_FOR_EFFORT_PLANS
echo "$(date +%s) - Rules read and acknowledged for WAITING_FOR_EFFORT_PLANS" > .state_rules_read_orchestrator_WAITING_FOR_EFFORT_PLANS
```

**FAILURE TO CREATE MARKER = AUTOMATIC -100% PENALTY**

The system will check for this marker. No marker = Immediate failure.

### ‚ùå DO NOT DO ANY WAITING_FOR_EFFORT_PLANS WORK UNTIL RULES ARE READ:
- ‚ùå Start check effort plan status
- ‚ùå Start monitor reviewer progress
- ‚ùå Start collect completed plans
- ‚ùå Update state files
- ‚ùå Continue to next state
- ‚ùå Think about what to do in this state

### ‚úÖ YOU MUST IMMEDIATELY:

## üî¥üî¥üî¥ MANDATORY STATE RULE READING AND ACKNOWLEDGMENT üî¥üî¥üî¥

### ‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è YOU MUST READ EACH RULE FILE LISTED IN PRIMARY DIRECTIVES. **I AM WATCHING YOUR TOOL CALLS FOR READ OPERATIONS** *YOU WILL FAIL* IF YOU DO NOT MAKE A READ FILE CALL FOR EACH RULE FILE IN PRIMARY DIRECTIVES!!! ‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è

**AFTER READING, YOU MUST ACKNOWLEDGE ALL THE STATE RULES AND STATE THAT YOU WILL ABIDE BY THEM ONE AT A TIME GIVING THE RULE NUMBER AND DESCRIPTION.**

### ‚ùå ANTI-PATTERNS THAT WILL CAUSE FAILURE:

1. **Fake Acknowledgment Without Reading**:
   ```
   ‚ùå WRONG: "I acknowledge R151, R208, R053..."
   (No Read tool calls detected = AUTOMATIC FAILURE)
   ```

2. **Bulk Acknowledgment**:
   ```
   ‚ùå WRONG: "I acknowledge all WAITING_FOR_EFFORT_PLANS rules"
   (YOU Must READ AND ACKNOWLEDGE EACH rule individually)
   ```

3. **Silent Reading**:
   ```
   ‚ùå WRONG: [Reads rules but doesn't acknowledge]
   "Now I've read the rules, let me start work..."
   (MUST explicitly acknowledge EACH rule)
   ```

4. **Reading From Memory**:
   ```
   ‚ùå WRONG: "I know R208 requires CD before spawn..."
   (Must READ from file, not recall from memory)
   ```

5. **Skipping Rules in PRIMARY DIRECTIVES**:
   ```
   ‚ùå WRONG: Reading only some rules from the list
   (ALL rules in PRIMARY DIRECTIVES are MANDATORY)
   ```

### ‚úÖ CORRECT PATTERN FOR WAITING_FOR_EFFORT_PLANS:
```
1. READ: $CLAUDE_PROJECT_DIR/rule-library/[first-rule-file].md
2. "I acknowledge [Rule#] - [Rule Name]: [Brief description]"
3. READ: $CLAUDE_PROJECT_DIR/rule-library/[second-rule-file].md  
4. "I acknowledge [Rule#] - [Rule Name]: [Brief description]"
[Continue for EVERY rule in PRIMARY DIRECTIVES...]
5. "Ready to execute WAITING_FOR_EFFORT_PLANS work"
```

### üö® NO WORK UNTIL ACKNOWLEDGMENT COMPLETE üö®
**You may NOT begin ANY WAITING_FOR_EFFORT_PLANS work until:**
1. ‚úÖ ALL rules in PRIMARY DIRECTIVES have been READ
2. ‚úÖ ALL rules have been individually ACKNOWLEDGED
3. ‚úÖ You have stated readiness to execute WAITING_FOR_EFFORT_PLANS work
1. **READ** every rule file listed in PRIMARY DIRECTIVES below
2. **ACKNOWLEDGE** each rule individually with number and description
3. **ONLY THEN** proceed with WAITING_FOR_EFFORT_PLANS work

### üö® FAILURE TO READ STATE RULES FIRST = IMMEDIATE EXIT üö®
**If you do ANY WAITING_FOR_EFFORT_PLANS work before reading and acknowledging rules:**
- **STOP ALL WORK IMMEDIATELY**
- **EXIT WITH FAILURE STATUS**
- **YOU HAVE VIOLATED STATE COMPLIANCE**

**THE SYSTEM IS MONITORING YOUR READ TOOL CALLS!**

## üìã RULE SUMMARY FOR WAITING_FOR_EFFORT_PLANS STATE

### Rules Enforced in This State:
- R234: Mandatory State Traversal [SUPREME LAW - Part of sequence]
- R255: Post-Agent Work Verification [BLOCKING - Check every completion]
- R322: Never Stop Monitoring [SUPREME LAW - Keep checking]
- R287: TODO Save Frequency [BLOCKING - Every 10 messages/15 min]
- R288: State File Update and Commit [SUPREME LAW - Track progress]

### Critical Requirements:
1. Actively poll for plans NOW - Penalty: -30%
2. Check every 5-10 seconds - Penalty: -20%
3. Verify R255 for each completion - Penalty: -100%
4. Save TODOs every 15 minutes - Penalty: -15%
5. Transition to ANALYZE_IMPLEMENTATION_PARALLELIZATION - Penalty: -100%

### Success Criteria:
- ‚úÖ All IMPLEMENTATION-PLAN.md files created
- ‚úÖ All plans in correct directories (R255)
- ‚úÖ All plans committed and pushed
- ‚úÖ Work logs updated

### Failure Triggers:
- ‚ùå Skip to SPAWN_AGENTS = -100% R234 VIOLATION
- ‚ùå Accept plans in wrong location = R255 VIOLATION
- ‚ùå Stop monitoring = R322 VIOLATION
- ‚ùå Forget TODO saves = -15% per violation

## üö® WAITING_FOR_EFFORT_PLANS IS A VERB - START ACTIVELY CHECKING IMMEDIATELY! üö®

### IMMEDIATE ACTIONS UPON ENTERING WAITING_FOR_EFFORT_PLANS

**THE MOMENT YOU ENTER THIS STATE, YOU MUST:**
1. Poll effort directories for IMPLEMENTATION-PLAN.md NOW
2. Check every 5-10 seconds for completion
3. Check TodoWrite for pending items and process them
4. Report status of each effort immediately

**FORBIDDEN - AUTOMATIC FAILURE:**
- ‚ùå "STATE TRANSITION COMPLETE: Now in WAITING_FOR_EFFORT_PLANS" [stops]
- ‚ùå "Successfully entered WAITING_FOR_EFFORT_PLANS state" [waits]
- ‚ùå "Ready to start actively checking" [pauses]
- ‚ùå "I'm in WAITING_FOR_EFFORT_PLANS state" [does nothing]

**REQUIRED - IMMEDIATE ACTION:**
- ‚úÖ "Entering WAITING_FOR_EFFORT_PLANS, Poll effort directories for IMPLEMENTATION-PLAN.md NOW..."
- ‚úÖ "START ACTIVELY CHECKING, check every 5-10 seconds for completion..."
- ‚úÖ "WAITING_FOR_EFFORT_PLANS: Report status of each effort immediately..."

## üî¥üî¥üî¥ MANDATORY MEASUREMENT RULE - R304 üî¥üî¥üî¥

**ABSOLUTE REQUIREMENTS:**
- ‚úÖ MUST use `$CLAUDE_PROJECT_DIR/tools/line-counter.sh` for ALL line counting
- ‚ùå NEVER use `wc -l` or any manual counting method
- ‚ùå NEVER count lines any other way - this is a -100% automatic failure
- ‚úÖ MUST specify both -b (base branch) and -c (current branch) parameters
- ‚úÖ Base branch MUST be phase integration branch (NOT "main")

**Failure to use the line counter tool = AUTOMATIC -100% GRADE**

## State Context
You are waiting for Code Reviewers to complete individual effort implementation plans.

## üî¥üî¥üî¥ SUPREME LAW R234 - STAY IN SEQUENCE üî¥üî¥üî¥

### YOUR POSITION IN THE MANDATORY SEQUENCE:
```
SETUP_EFFORT_INFRASTRUCTURE (‚úì completed)
    ‚Üì
ANALYZE_CODE_REVIEWER_PARALLELIZATION (‚úì completed)
    ‚Üì
SPAWN_CODE_REVIEWERS_EFFORT_PLANNING (‚úì completed)
    ‚Üì
WAITING_FOR_EFFORT_PLANS (üëà YOU ARE HERE)
    ‚Üì (MUST GO HERE NEXT)
ANALYZE_IMPLEMENTATION_PARALLELIZATION
    ‚Üì
SPAWN_AGENTS
```

**NOW:** Actively monitor Code Reviewers
**NEXT:** You MUST go to ANALYZE_IMPLEMENTATION_PARALLELIZATION
**FORBIDDEN:** Skipping analysis to go directly to SPAWN_AGENTS = -100%

## Monitoring Requirements (R340 Compliant)

### üö®üö®üö® RULE R340: PLANNING FILE METADATA TRACKING (BLOCKING)
- **MUST** read plan locations from orchestrator-state.json
- **NEVER** search directories for planning files
- **ALWAYS** use planning_files.effort_plans section
- **VIOLATION = -20% for each untracked file**

```bash
# R340 Compliant: Check status of effort plans from state
check_effort_plan_status() {
    local PHASE=$1 WAVE=$2
    local ALL_COMPLETE=true
    
    echo "üìä Checking effort plan status (R340 compliant)..."
    
    # Get list of efforts for this wave from state
    EFFORTS=$(jq -r ".efforts_in_progress[] | select(.phase == $PHASE and .wave == $WAVE) | .name" orchestrator-state.json)
    
    if [ -z "$EFFORTS" ]; then
        echo "‚ö†Ô∏è No efforts found for phase${PHASE}/wave${WAVE}"
        return 1
    fi
    
    # R340: Check each effort's plan in state file
    for EFFORT in $EFFORTS; do
        # R340: Read plan location from state
        PLAN_PATH=$(jq -r ".planning_files.effort_plans[\"${EFFORT}\"].file_path // null" orchestrator-state.json)
        
        if [ "$PLAN_PATH" != "null" ] && [ -n "$PLAN_PATH" ]; then
            if [ -f "$PLAN_PATH" ]; then
                echo "‚úÖ $EFFORT: Plan tracked and exists at $PLAN_PATH"
            else
                echo "‚ùå $EFFORT: Plan tracked but file missing: $PLAN_PATH"
                ALL_COMPLETE=false
            fi
        else
            echo "‚è≥ $EFFORT: Plan not yet tracked in state (waiting for Code Reviewer report)"
            ALL_COMPLETE=false
            
            # Check if Code Reviewer reported completion for this effort
            REVIEWER_STATE=$(jq -r ".spawned_agents[] | select(.name == \"code-reviewer\" and .assigned_effort == \"${EFFORT}\") | .state // \"UNKNOWN\"" orchestrator-state.json)
            if [ "$REVIEWER_STATE" = "COMPLETED" ]; then
                echo "   ‚ö†Ô∏è Code Reviewer completed but plan not tracked - waiting for metadata update"
            fi
        fi
    done
    
    if [ "$ALL_COMPLETE" = true ]; then
        echo "‚úÖ All effort plans tracked and exist!"
        return 0
    else
        echo "‚è≥ Waiting for remaining plans to be tracked..."
        return 1
    fi
}
```

## Validation Before Proceeding (R340 Compliant)

Before transitioning to SPAWN_AGENTS, verify:

1. **All Plans Tracked and Exist (R340):**
   ```bash
   # R340: Validate all plans are tracked in state
   PHASE=$(jq -r '.current_phase' orchestrator-state.json)
   WAVE=$(jq -r '.current_wave' orchestrator-state.json)
   
   # Get list of efforts for this wave
   EFFORTS=$(jq -r ".efforts_in_progress[] | select(.phase == $PHASE and .wave == $WAVE) | .name" orchestrator-state.json)
   
   for EFFORT_NAME in $EFFORTS; do
       # R340: Read plan location from state
       PLAN_PATH=$(jq -r ".planning_files.effort_plans[\"${EFFORT_NAME}\"].file_path // null" orchestrator-state.json)
       
       if [ "$PLAN_PATH" = "null" ] || [ -z "$PLAN_PATH" ]; then
           echo "‚ùå R340 VIOLATION: No plan tracked for $EFFORT_NAME"
           echo "   Code Reviewer must report plan metadata to Orchestrator"
           exit 340
       fi
       
       if [ ! -f "$PLAN_PATH" ]; then
           echo "‚ùå Plan tracked but file missing for $EFFORT_NAME: $PLAN_PATH"
           exit 1
       fi
       
       echo "‚úÖ Plan verified for $EFFORT_NAME: $PLAN_PATH"
       
       # Also verify metadata is complete
       CREATED_BY=$(jq -r ".planning_files.effort_plans[\"${EFFORT_NAME}\"].created_by" orchestrator-state.json)
       CREATED_AT=$(jq -r ".planning_files.effort_plans[\"${EFFORT_NAME}\"].created_at" orchestrator-state.json)
       
       if [ "$CREATED_BY" = "null" ] || [ "$CREATED_AT" = "null" ]; then
           echo "‚ö†Ô∏è Incomplete metadata for $EFFORT_NAME plan"
       fi
   done
   ```

2. **Plans Include Required Sections:**
   - Implementation approach
   - Test requirements
   - Size limits
   - Dependencies
   - File structure

3. **Work Logs Updated:**
   ```bash
   for effort_dir in efforts/phase${PHASE}/wave${WAVE}/*/; do
       grep -q "Planning complete" "$effort_dir/work-log.md" || echo "Missing"
   done
   ```

## State Transition

Once ALL effort plans are complete:
1. Update orchestrator-state.json
2. Record effort plan locations
3. **üéØ R356 OPTIMIZATION - Check Effort Count for Next State:**
   ```bash
   # R356: Single-effort optimization check
   EFFORT_COUNT=$(jq '.efforts_in_progress | length' orchestrator-state.json)

   if [ "$EFFORT_COUNT" -eq 1 ]; then
       EFFORT_NAME=$(jq -r '.efforts_in_progress[0].name' orchestrator-state.json)
       echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
       echo "üéØ R356 OPTIMIZATION: Single Effort Detected"
       echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
       echo "Effort: $EFFORT_NAME"
       echo "Implementation Parallelization: NOT NEEDED (only 1 effort)"
       echo "Next State: SPAWN_AGENTS (direct)"
       echo "Skipping: ANALYZE_IMPLEMENTATION_PARALLELIZATION"
       echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"

       NEXT_STATE="SPAWN_AGENTS"
       TRANSITION_REASON="Single effort - R356 optimization applied, skipping parallelization analysis"
   else
       echo "Multiple efforts detected: $EFFORT_COUNT"
       echo "Parallelization analysis required for optimal SW Engineer spawning"
       NEXT_STATE="ANALYZE_IMPLEMENTATION_PARALLELIZATION"
       TRANSITION_REASON="Multiple efforts require parallelization analysis"
   fi
   ```
4. **Transition to determined state:**
   - Single effort ‚Üí **SPAWN_AGENTS** (R356 optimization)
   - Multiple efforts ‚Üí **ANALYZE_IMPLEMENTATION_PARALLELIZATION** (R234 sequence)

### R287 MONITORING CHECKPOINT
```bash
# Every 15 minutes while monitoring
TIME_SINCE_SAVE=$(($(date +%s) - LAST_TODO_SAVE))
if [ $TIME_SINCE_SAVE -gt 900 ]; then
    echo "‚ö†Ô∏è R287: 15 minutes elapsed - saving TODOs..."
    save_todos "WAITING_FOR_EFFORT_PLANS checkpoint"
    LAST_TODO_SAVE=$(date +%s)
fi

# Every 10 messages
if [ $((MESSAGE_COUNT % 10)) -eq 0 ]; then
    echo "üíæ R287: 10 messages - saving TODOs..."
    save_todos "Message checkpoint"
fi
```

### BEFORE TRANSITION
```bash
# R287: State transition trigger
echo "üíæ R287: Saving TODOs before state transition..."
save_todos "All effort plans complete"

# R287: Commit within 60 seconds
cd $CLAUDE_PROJECT_DIR
git add todos/*.todo orchestrator-state.json
git commit -m "todo: effort plans complete, ready for analysis"
git push
```

## Timeout Handling

If plans not complete within reasonable time:
- Check for blocked Code Reviewers
- Review error logs
- Consider ERROR_RECOVERY state

## Do NOT Proceed If:
- ‚ùå Any effort missing IMPLEMENTATION-PLAN.md
- ‚ùå Plans are incomplete or malformed
- ‚ùå Infrastructure issues detected
- ‚ùå Code Reviewers report blocking issues


## R322 VIOLATION DETECTION

If you find yourself:
- Starting work for a new state without /continue-orchestrating
- Transitioning without stopping after state file commit
- Continuing after completing state work

**STOP IMMEDIATELY - You are violating R322!**


### üî¥üî¥üî¥ MANDATORY VALIDATION REQUIREMENT üî¥üî¥üî¥

**Per R288 and R324**: ALL state file updates MUST be validated before commit:

```bash
# After ANY update to orchestrator-state.json:
"$CLAUDE_PROJECT_DIR/tools/validate-state.sh" orchestrator-state.json || {
    echo "‚ùå State file validation failed!"
    exit 288
}
```

**Use helper functions for automatic validation:**
```bash
# Source the helper functions
source "$CLAUDE_PROJECT_DIR/utilities/state-file-update-functions.sh"

# Use safe functions that include validation:
safe_state_transition "NEW_STATE" "reason"
safe_update_field "field_name" "value"
```
