# Orchestrator - SETUP_PHASE_INTEGRATION_INFRASTRUCTURE State Rules

## üõëüõëüõë R322 MANDATORY STOP BEFORE STATE TRANSITIONS üõëüõëüõë

**SUPREME LAW - VIOLATION = -100% IMMEDIATE FAILURE**

### YOU MUST STOP AFTER:
1. ‚úÖ Completing all TODOs for this state
2. ‚úÖ Updating orchestrator-state.json with new state
3. ‚úÖ Committing and pushing the state file  
4. ‚úÖ Providing work summary

### YOU MUST NOT:
- ‚ùå Continue to the next state automatically
- ‚ùå Start work for the new state
- ‚ùå Spawn agents for the new state
- ‚ùå Assume permission to continue

### STOP PROTOCOL:
```markdown
## üõë STATE TRANSITION CHECKPOINT: CURRENT_STATE ‚Üí NEXT_STATE

### ‚úÖ Current State Work Completed:
- [List completed work]

### üìä Current Status:
- Current State: CURRENT_STATE
- Next State: NEXT_STATE
- TODOs Completed: X/Y
- State Files: Updated and committed ‚úÖ

### ‚è∏Ô∏è STOPPED - Awaiting User Continuation
Ready to transition to NEXT_STATE. Please use /continue-orchestrating.
```

**STOP MEANS STOP - Exit and wait for /continue-orchestrating**

---

## üî¥üî¥üî¥ CRITICAL: PHASE INTEGRATION BASE BRANCH DETERMINATION (R308) üî¥üî¥üî¥

**VIOLATION = -100% AUTOMATIC FAILURE**

### PHASE INTEGRATION MUST FOLLOW R308 INCREMENTAL STRATEGY:

**Phase Integration branches are created from the LAST WAVE integration of the phase:**
- Phase 1 Integration: from phase1-waveN-integration (where N is last wave)
- Phase 2 Integration: from phase2-waveN-integration (where N is last wave)
- Phase 3 Integration: from phase3-waveN-integration (where N is last wave)

### üî¥ CRITICAL R308 ENFORCEMENT FOR PHASE INTEGRATION:
```bash
# Example: Phase 2 Integration (after completing Phase 2 Wave 3)
# WRONG - AUTOMATIC FAILURE:
BASE_BRANCH="main"  # ‚ùå NEVER for phase integration!
BASE_BRANCH="phase1-integration"  # ‚ùå WRONG! Not from previous phase!

# CORRECT:
BASE_BRANCH="phase2-wave3-integration"  # ‚úÖ From last wave of THIS phase!
```

### PHASE INTEGRATION BASE DETERMINATION LOGIC:
```bash
determine_phase_integration_base() {
    local PHASE=$1
    local LAST_WAVE=$(jq -r ".phase${PHASE}.waves | length" orchestrator-state.json)
    
    echo "üî¥ R308: Phase $PHASE integration base determination"
    echo "üìä Phase $PHASE has $LAST_WAVE completed waves"
    
    # Phase integration uses last wave integration of THIS phase
    BASE_BRANCH="phase${PHASE}-wave${LAST_WAVE}-integration"
    
    echo "‚úÖ R308 VALIDATED: Phase $PHASE integration will use: $BASE_BRANCH"
    echo "   (Last wave integration of Phase $PHASE)"
    
    # Verify the base branch exists
    if ! git rev-parse --verify "$BASE_BRANCH" >/dev/null 2>&1; then
        echo "‚ùå R308 FATAL: Required base branch not found: $BASE_BRANCH"
        echo "   Phase integration cannot proceed without all wave integrations!"
        exit 1
    fi
    
    echo "$BASE_BRANCH"
}
```

**Acknowledge: "I understand PHASE integration branches MUST use the last wave integration of THIS phase per R308"**

## üî¥üî¥üî¥ STOP! STATE RULE READING IS ABSOLUTELY FIRST! üî¥üî¥üî¥

**YOU HAVE ENTERED SETUP_PHASE_INTEGRATION_INFRASTRUCTURE STATE - YOU MUST READ AND ACKNOWLEDGE ALL STATE RULES BEFORE DOING ANY STATE WORK!**

## üî¥üî¥üî¥ R290 VERIFICATION REQUIREMENT üî¥üî¥üî¥

**R290 ENFORCEMENT: CREATE VERIFICATION MARKER AFTER READING**

After reading and acknowledging all state rules, you MUST create a verification marker:

```bash
# MANDATORY: Create verification marker after reading rules
touch .state_rules_read_orchestrator_SETUP_PHASE_INTEGRATION_INFRASTRUCTURE
echo "$(date +%s) - Rules read and acknowledged for SETUP_PHASE_INTEGRATION_INFRASTRUCTURE" > .state_rules_read_orchestrator_SETUP_PHASE_INTEGRATION_INFRASTRUCTURE
```

**FAILURE TO CREATE MARKER = AUTOMATIC -100% PENALTY**

The system will check for this marker. No marker = Immediate failure.

### ‚ùå DO NOT DO ANY SETUP_PHASE_INTEGRATION_INFRASTRUCTURE WORK UNTIL RULES ARE READ:
- ‚ùå Start creating phase integration workspace
- ‚ùå Start creating phase integration branch
- ‚ùå Start determining base branch
- ‚ùå Start pushing to remote
- ‚ùå Update state files
- ‚ùå Continue to next state

### ‚úÖ YOU MUST IMMEDIATELY:

## üî¥üî¥üî¥ MANDATORY STATE RULE READING AND ACKNOWLEDGMENT üî¥üî¥üî¥

### READ ALL RULES IN THIS FILE COMPLETELY

You are now in the **SETUP_PHASE_INTEGRATION_INFRASTRUCTURE** state. You MUST:

1. **READ** every single rule in this file from top to bottom
2. **UNDERSTAND** the requirements and restrictions
3. **ACKNOWLEDGE** in a structured format (see below)
4. **CREATE** the R290 verification marker
5. **THEN AND ONLY THEN** proceed with state work

### MANDATORY ACKNOWLEDGMENT FORMAT:
```markdown
## üìã STATE RULES ACKNOWLEDGED: SETUP_PHASE_INTEGRATION_INFRASTRUCTURE

I have read and understood all rules for the SETUP_PHASE_INTEGRATION_INFRASTRUCTURE state:

### Critical Rules Acknowledged:
‚úÖ R322: Mandatory stop before state transitions - ACKNOWLEDGED
‚úÖ R308: Phase integration uses last wave integration as base - ACKNOWLEDGED  
‚úÖ R290: Must create verification marker - ACKNOWLEDGED
‚úÖ Phase integration infrastructure creation requirements - ACKNOWLEDGED
‚úÖ Worktree and branch isolation requirements - ACKNOWLEDGED

### Key Requirements I Will Follow:
1. Create phase integration infrastructure with correct R308 base
2. Use phase{N}-wave{LAST}-integration as base branch
3. Create isolated full clone working copy for phase integration
4. Update orchestrator-state.json with infrastructure details
5. Stop after completing state work

### Prohibitions I Will Respect:
- Will NOT continue to next state automatically
- Will NOT use wrong base branch (main or previous phase)
- Will NOT skip R308 validation
- Will NOT proceed without verification marker
```

---

## üìã PRIMARY STATE RESPONSIBILITIES

This state is responsible for creating the infrastructure needed for PHASE integration:

### 1. PHASE INTEGRATION INFRASTRUCTURE CREATION
- Create isolated full clone working copy for phase integration work
- Create phase integration branch with R308-compliant base
- Set up clean workspace for Integration Agent

### 2. R308 COMPLIANCE FOR PHASE INTEGRATION
- Determine the last wave of the current phase
- Use phase{N}-wave{LAST}-integration as base
- NEVER use main or previous phase integration as base
- Validate base branch exists before proceeding

### 3. STATE TRACKING
- Update orchestrator-state.json with phase_integration_infrastructure
- Record branch name, working copy path, base branch
- Mark infrastructure as ready for Integration Agent

## üî¥üî¥üî¥ PHASE INTEGRATION SPECIFIC RULES üî¥üî¥üî¥

### PHASE INTEGRATION BRANCH NAMING:
- Pattern: `phase{N}-integration`
- Example: `phase2-integration`

### PHASE INTEGRATION WORKING COPY:
- Pattern: `phase{N}/integration/`
- Example: `phase2/integration/`

### BASE BRANCH DETERMINATION:
```bash
# For Phase N integration:
# Base = phase{N}-wave{LAST}-integration

# Examples:
Phase 1 with 3 waves ‚Üí base: phase1-wave3-integration
Phase 2 with 2 waves ‚Üí base: phase2-wave2-integration
Phase 3 with 4 waves ‚Üí base: phase3-wave4-integration
```

## üìù PHASE INTEGRATION INFRASTRUCTURE WORKFLOW

### Step 1: Validate Phase Completion
```bash
# Check all waves are integrated
PHASE=$(jq -r '.current_phase' orchestrator-state.json)
WAVES_COUNT=$(jq -r ".phase${PHASE}.waves | length" orchestrator-state.json)

for ((i=1; i<=WAVES_COUNT; i++)); do
    WAVE_INTEGRATED=$(jq -r ".phase${PHASE}.waves[\"wave${i}\"].integrated" orchestrator-state.json)
    if [ "$WAVE_INTEGRATED" != "true" ]; then
        echo "‚ùå Wave $i not integrated! Cannot proceed with phase integration"
        exit 1
    fi
done
```

### Step 2: Determine R308 Base Branch
```bash
# Get last wave integration branch
LAST_WAVE=$(jq -r ".phase${PHASE}.waves | length" orchestrator-state.json)
BASE_BRANCH="phase${PHASE}-wave${LAST_WAVE}-integration"

echo "üî¥ R308 ENFORCEMENT: Phase $PHASE integration"
echo "   Base: $BASE_BRANCH (last wave of this phase)"
```

### Step 3: Create Phase Integration Infrastructure
```bash
# Check if integration branch already exists (R342 early creation)
INTEGRATION_BRANCH="phase${PHASE}-integration"
INTEGRATION_DIR="$CLAUDE_PROJECT_DIR/phase${PHASE}/integration"

# R342: Branch may already exist with tests
if git ls-remote --heads origin "$INTEGRATION_BRANCH" | grep -q "$INTEGRATION_BRANCH"; then
    echo "‚úÖ R342: Phase integration branch already exists (created early with tests)"
    git fetch origin "$INTEGRATION_BRANCH"
    mkdir -p "$(dirname "$INTEGRATION_DIR")"
    git clone "$TARGET_REPO" "$INTEGRATION_DIR"
    cd "$INTEGRATION_DIR"
    git checkout "$INTEGRATION_BRANCH"
    
    # Verify tests exist
    cd "$INTEGRATION_DIR"
    if [ -d "tests/phase${PHASE}" ]; then
        echo "‚úÖ Phase ${PHASE} tests already present (R341/R342 compliant)"
    fi
    cd -
else
    echo "Creating new phase integration branch"
    mkdir -p "$(dirname "$INTEGRATION_DIR")"
    git clone "$TARGET_REPO" "$INTEGRATION_DIR"
    cd "$INTEGRATION_DIR"
    git checkout -b "$INTEGRATION_BRANCH" "$BASE_BRANCH"
fi
```

### Step 4: Update State File
```bash
# Record infrastructure in orchestrator-state.json
jq --arg branch "$INTEGRATION_BRANCH" \
   --arg working_copy "$INTEGRATION_DIR" \
   --arg base "$BASE_BRANCH" \
   '.phase_integration_infrastructure = {
      "branch": $branch,
      "working_copy": $working_copy,
      "base_branch": $base,
      "type": "phase",
      "phase": '$PHASE',
      "created_at": now | todate,
      "ready": true
   }' orchestrator-state.json > tmp.json && mv tmp.json orchestrator-state.json
```

## üö® COMMON PHASE INTEGRATION VIOLATIONS

### ‚ùå WRONG BASE BRANCH:
```bash
# Phase 2 Integration
BASE_BRANCH="main"  # ‚ùå NEVER!
BASE_BRANCH="phase1-integration"  # ‚ùå Not from previous phase!
BASE_BRANCH="phase2-wave1-integration"  # ‚ùå Must use LAST wave!

# CORRECT:
BASE_BRANCH="phase2-wave3-integration"  # ‚úÖ Last wave of THIS phase
```

### ‚ùå SKIPPING WAVE VALIDATION:
```bash
# Creating phase integration without checking all waves
# ‚ùå WRONG - May have unintegrated waves!
```

### ‚ùå WRONG WORKING COPY PATH:
```bash
INTEGRATION_DIR="integration"  # ‚ùå Too generic
INTEGRATION_DIR="phase-2/integration"  # ‚ùå Wrong format

# CORRECT:
INTEGRATION_DIR="$CLAUDE_PROJECT_DIR/phase2/integration"  # ‚úÖ
```

## üìä SUCCESS CRITERIA

### Infrastructure Created Successfully When:
- ‚úÖ All waves of the phase are integrated
- ‚úÖ R308 base branch correctly determined (last wave)
- ‚úÖ Worktree created with correct naming
- ‚úÖ Branch created from correct base
- ‚úÖ orchestrator-state.json updated with infrastructure
- ‚úÖ Git operations successful

### Ready for Integration Agent When:
- ‚úÖ phase_integration_infrastructure.ready = true
- ‚úÖ Worktree exists and is clean
- ‚úÖ Branch pushed to remote
- ‚úÖ No uncommitted changes

## üõë STATE TRANSITION REQUIREMENTS

### Before Transitioning to SPAWN_INTEGRATION_AGENT_PHASE:
1. ‚úÖ Phase integration infrastructure created
2. ‚úÖ R308 compliance verified
3. ‚úÖ State file updated and committed
4. ‚úÖ Provide completion summary
5. ‚úÖ STOP and wait for user continuation

### Transition Checklist:
```bash
echo "‚úÖ Phase integration infrastructure ready:"
echo "   - Branch: $INTEGRATION_BRANCH"
echo "   - Base: $BASE_BRANCH (R308 compliant)"
echo "   - Worktree: $WORKTREE_PATH"
echo "   - Type: Phase $PHASE"
echo ""
echo "üõë STOPPING - Ready to spawn Integration Agent"
echo "   Use /continue-orchestrating to proceed"
```

## ‚ö†Ô∏è ERROR HANDLING

### If Base Branch Not Found:
```bash
if ! git rev-parse --verify "$BASE_BRANCH" >/dev/null 2>&1; then
    echo "‚ùå FATAL: Base branch $BASE_BRANCH does not exist!"
    echo "   Cannot create phase integration without all wave integrations"
    echo "   Check that all waves have been properly integrated"
    exit 1
fi
```

### If Worktree Already Exists:
```bash
if [ -d "$INTEGRATION_DIR" ]; then
    echo "‚ö†Ô∏è Working copy already exists, removing..."
    rm -rf "$INTEGRATION_DIR"
fi
```

### If Branch Already Exists:
```bash
if git rev-parse --verify "$INTEGRATION_BRANCH" >/dev/null 2>&1; then
    echo "‚ö†Ô∏è Branch already exists, deleting..."
    git branch -D "$INTEGRATION_BRANCH"
fi
```

## üìã FINAL CHECKLIST

Before marking this state complete:

- [ ] R290 verification marker created
- [ ] All waves validated as integrated
- [ ] R308 base branch correctly determined
- [ ] Phase integration working copy created
- [ ] Phase integration branch created from correct base
- [ ] Branch pushed to remote
- [ ] orchestrator-state.json updated with infrastructure
- [ ] State file committed and pushed
- [ ] Ready to spawn Integration Agent
- [ ] STOPPED and waiting for user continuation

---

**REMEMBER**: 
- Phase integration MUST use last wave of THIS phase (R308)
- NEVER use main or previous phase as base
- STOP after completing state work (R322)
- Create verification marker (R290)