# Orchestrator - PHASE_INTEGRATION State Rules

## ⚠️⚠️⚠️ MANDATORY RULE READING AND ACKNOWLEDGMENT ⚠️⚠️⚠️

**YOU MUST READ EACH RULE FILE LISTED IN PRIMARY DIRECTIVES. YOUR READ TOOL CALLS ARE BEING MONITORED.**

### ❌ ANTI-PATTERNS THAT WILL CAUSE FAILURE:
1. Fake acknowledgment without reading
2. Bulk acknowledgment
3. Reading from memory

### ✅ CORRECT PATTERN:
1. READ each rule file
2. Acknowledge individually with rule number and description

## 📋 PRIMARY DIRECTIVES FOR PHASE_INTEGRATION STATE

### 🚨🚨🚨 R259 - Mandatory Phase Integration After Fixes
**File**: `$CLAUDE_PROJECT_DIR/rule-library/R259-mandatory-phase-integration-after-fixes.md`
**Criticality**: BLOCKING - Must create integration branch after fixes
**Summary**: Create phase-level integration after ERROR_RECOVERY fixes

### 🚨🚨🚨 R257 - Mandatory Phase Assessment Report
**File**: `$CLAUDE_PROJECT_DIR/rule-library/R257-mandatory-phase-assessment-report.md`
**Criticality**: BLOCKING - Required for phase completion
**Summary**: Verify all assessment issues are addressed

### 🚨🚨🚨 R014 - Branch Naming Convention
**File**: `$CLAUDE_PROJECT_DIR/rule-library/R014-branch-naming-convention.md`
**Criticality**: BLOCKING - Mandatory project prefix for all branches
**Summary**: Use project prefix for phase integration branches

### 🚨🚨🚨 R271 - Mandatory Production-Ready Validation
**File**: `$CLAUDE_PROJECT_DIR/rule-library/R271-mandatory-production-ready-validation.md`
**Criticality**: BLOCKING - Full checkouts required
**Summary**: Phase integration must use full repository clones

### 🚨🚨🚨 R269 - Code Reviewer Merge Plan No Execution
**File**: `$CLAUDE_PROJECT_DIR/rule-library/R269-code-reviewer-merge-plan-no-execution.md`
**Criticality**: BLOCKING - Code Reviewer only plans
**Summary**: Code Reviewer creates plan, Integration Agent executes

### 🚨🚨🚨 R260 - Integration Agent Core Requirements
**File**: `$CLAUDE_PROJECT_DIR/rule-library/R260-integration-agent-core-requirements.md`
**Criticality**: BLOCKING - Integration Agent requirements
**Summary**: Integration Agent must acknowledge INTEGRATION_DIR

### 🔴🔴🔴 R233 - All States Require Immediate Action (CRITICAL)
**File**: `$CLAUDE_PROJECT_DIR/rule-library/R233-all-states-immediate-action.md`
**Criticality**: CRITICAL - States are verbs
**Summary**: PHASE_INTEGRATION means START INTEGRATING NOW

### 🔴🔴🔴 R252 - Mandatory State File Updates (SUPREME LAW #10)
**File**: `$CLAUDE_PROJECT_DIR/rule-library/R252-mandatory-state-file-updates.md`
**Criticality**: SUPREME LAW - Update on every transition
**Summary**: Update orchestrator-state.json with integration details

### 🚨🚨🚨 R253 - Mandatory State File Commit Push
**File**: `$CLAUDE_PROJECT_DIR/rule-library/R253-mandatory-state-file-commit-push.md`
**Criticality**: BLOCKING - Push within 60 seconds
**Summary**: Commit and push state file immediately

## 🚨 PHASE_INTEGRATION IS A VERB - START INTEGRATING IMMEDIATELY! 🚨

### IMMEDIATE ACTIONS UPON ENTERING PHASE_INTEGRATION

**THE MOMENT YOU ENTER THIS STATE, YOU MUST:**
1. Create phase-level integration branch NOW
2. Merge all wave integration branches into phase branch
3. Merge all ERROR_RECOVERY fix branches  
4. Verify all architect-identified issues are addressed
5. Push phase integration branch for re-review

**FORBIDDEN - AUTOMATIC FAILURE:**
- ❌ "STATE TRANSITION COMPLETE: Now in PHASE_INTEGRATION" [stops]
- ❌ "Successfully entered PHASE_INTEGRATION state" [waits]
- ❌ "Ready to start phase integration" [pauses]
- ❌ "I'm in PHASE_INTEGRATION state" [does nothing]

**REQUIRED - IMMEDIATE ACTION:**
- ✅ "Entering PHASE_INTEGRATION, creating phase3-integration branch NOW..."
- ✅ "START PHASE_INTEGRATION, merging all wave branches immediately..."
- ✅ "PHASE_INTEGRATION: Merging ERROR_RECOVERY fixes from fix branches..."

## Primary Purpose

Create a clean phase-level integration branch that includes:
- All wave integration branches from the phase
- All fixes from ERROR_RECOVERY addressing phase assessment issues
- Ready for architect phase reassessment
- Comprehensive integration of all phase work

## State Context

You are creating a phase-level integration branch after ERROR_RECOVERY has addressed all issues identified in the architect's phase assessment report. This is similar to wave integration but at a higher level, consolidating an entire phase worth of work plus fixes.

### 🚨🚨🚨 RULE R259 - Phase Integration Requirements
**SEE**: `$CLAUDE_PROJECT_DIR/rule-library/R259-mandatory-phase-integration-after-fixes.md`

### 🚨🚨🚨 RULE R257 - Assessment Report Verification
**SEE**: `$CLAUDE_PROJECT_DIR/rule-library/R257-mandatory-phase-assessment-report.md`

## Branch Naming Convention (R014 MANDATORY)

```bash
# 🔴 CRITICAL: Use branch naming helpers for project prefix support
source "$SF_INSTANCE_DIR/utilities/branch-naming-helpers.sh"

# Phase integration branch naming (includes project prefix automatically)
PHASE_BRANCH=$(get_phase_integration_branch_name "$PHASE")
# Example with prefix: tmc-workspace/phase3-integration
# Example without: phase3-integration

# After fixes branch naming (special case with timestamp)
# Since this is after ERROR_RECOVERY, add timestamp for uniqueness
BASE_BRANCH=$(get_phase_integration_branch_name "$PHASE")
PHASE_FIXES_BRANCH="${BASE_BRANCH}-post-fixes-$(date +%Y%m%d-%H%M%S)"
# Example with prefix: tmc-workspace/phase3-integration-post-fixes-20250827-153000
# Example without: phase3-integration-post-fixes-20250827-153000
```

## Integration Process

### 1. Create Phase Integration Infrastructure

```bash
#!/bin/bash
# Setup phase integration workspace and branch

SF_INSTANCE_DIR=$(pwd)  # Save SF instance location
PHASE=$(yq '.current_phase' orchestrator-state.json)
TIMESTAMP=$(date +%Y%m%d-%H%M%S)

# Source branch naming helpers (R014 MANDATORY)
source "$SF_INSTANCE_DIR/utilities/branch-naming-helpers.sh"

# Create phase integration workspace
PHASE_DIR="/efforts/phase${PHASE}"
INTEGRATION_DIR="${PHASE_DIR}/phase-integration-workspace"
echo "Creating phase integration workspace at: $INTEGRATION_DIR"
mkdir -p "$(dirname "$INTEGRATION_DIR")"

# Determine base branch for phase integration (R271)
echo "🧠 THINKING: Phase integration needs clean base from main branch"
BASE_BRANCH=$(yq '.target_repository.base_branch' "$SF_INSTANCE_DIR/target-repo-config.yaml")
if [ -z "$BASE_BRANCH" ] || [ "$BASE_BRANCH" = "null" ]; then
    BASE_BRANCH="main"
fi
echo "📌 Decision: Using '$BASE_BRANCH' for phase integration (clean start)"

# SINGLE-BRANCH FULL clone of TARGET repository (R271 Supreme Law)
echo "📦 Creating FULL phase integration clone from branch: $BASE_BRANCH"
TARGET_REPO_URL=$(yq '.target_repository.url' "$SF_INSTANCE_DIR/target-repo-config.yaml")

git clone \
    --single-branch \
    --branch "$BASE_BRANCH" \
    "$TARGET_REPO_URL" \
    "$INTEGRATION_DIR"

if [ $? -ne 0 ]; then
    echo "❌ Clone failed! Check if base branch '$BASE_BRANCH' exists"
    exit 1
fi

cd "$INTEGRATION_DIR"

# Verify FULL checkout (R271 compliance)
if [ -f ".git/info/sparse-checkout" ]; then
    echo "🔴🔴🔴 SUPREME LAW VIOLATION: Sparse checkout in phase integration!"
    exit 1
fi
echo "✅ Full codebase available for phase integration from $BASE_BRANCH"

# Create phase integration branch with proper naming (R014)
BASE_BRANCH=$(get_phase_integration_branch_name "$PHASE")
BRANCH_NAME="${BASE_BRANCH}-post-fixes-${TIMESTAMP}"
echo "🔀 Creating phase integration branch: $BRANCH_NAME"
git checkout -b "$BRANCH_NAME"

# Push to establish remote tracking
git push -u origin "$BRANCH_NAME"

echo "✅ Phase integration infrastructure ready: $BRANCH_NAME"
```

### 2. Spawn Code Reviewer for Phase Merge Plan

```bash
#!/bin/bash
# Spawn Code Reviewer to create PHASE-MERGE-PLAN.md

PHASE=$(yq '.current_phase' orchestrator-state.json)
INTEGRATION_DIR="/efforts/phase${PHASE}/phase-integration-workspace"
BRANCH_NAME=$(git branch --show-current)

cat > /tmp/code-reviewer-phase-merge-plan-task.md << EOF
Create PHASE MERGE PLAN for Phase ${PHASE} integration.

CRITICAL REQUIREMENTS:
1. Use ONLY original wave effort branches - NO integration branches!
2. Include ALL ERROR_RECOVERY fix branches from phase assessment
3. Analyze branch bases to determine correct merge order
4. Create PHASE-MERGE-PLAN.md with exact merge instructions
5. DO NOT execute merges - only plan them!

Integration Directory: ${INTEGRATION_DIR}
Target Branch: ${BRANCH_NAME}
Phase Assessment Report: phase-assessments/phase${PHASE}/PHASE-${PHASE}-ASSESSMENT-REPORT.md
EOF

# Spawn Code Reviewer
Task: subagent_type="code-reviewer" \
      prompt="$(cat /tmp/code-reviewer-phase-merge-plan-task.md)" \
      description="Create Phase ${PHASE} Merge Plan"

echo "📋 Waiting for Code Reviewer to create PHASE-MERGE-PLAN.md..."
```

### 3. Spawn Integration Agent for Phase Integration

```bash
#!/bin/bash
# After Code Reviewer creates PHASE-MERGE-PLAN.md

PHASE=$(yq '.current_phase' orchestrator-state.json)
INTEGRATION_DIR="/efforts/phase${PHASE}/phase-integration-workspace"

# CD into phase integration directory
cd "$INTEGRATION_DIR"

# Verify merge plan exists
if [ ! -f "PHASE-MERGE-PLAN.md" ]; then
    echo "❌ Cannot spawn Integration Agent - no phase merge plan!"
    exit 1
fi

# Spawn Integration Agent
Task: subagent_type="integration-agent" \
      prompt="Execute phase integration merges for Phase ${PHASE}.
      
      CRITICAL REQUIREMENTS:
      1. You are in INTEGRATION_DIR: ${INTEGRATION_DIR}
      2. Acknowledge and set INTEGRATION_DIR variable
      3. Read and follow PHASE-MERGE-PLAN.md EXACTLY
      4. Execute merges in specified order
      5. Handle conflicts as directed in plan
      6. Run phase-level tests after all merges
      
      Your working directory has been set to: ${INTEGRATION_DIR}
      The merge plan is: PHASE-MERGE-PLAN.md" \
      description="Execute Phase ${PHASE} Integration"

echo "🎯 Integration Agent spawned for phase integration"
```

### 4. Verify Against Assessment Report

```bash
#!/bin/bash
# Verify all issues from phase assessment are addressed

verify_phase_integration() {
    local PHASE=$1
    local REPORT="phase-assessments/phase${PHASE}/PHASE-${PHASE}-ASSESSMENT-REPORT.md"
    
    if [ ! -f "$REPORT" ]; then
        echo "❌ Phase assessment report not found!"
        return 1
    fi
    
    echo "📋 Verifying fixes against assessment report..."
    
    # Extract Priority 1 issues
    PRIORITY_1=$(sed -n '/### Priority 1/,/### Priority 2/p' "$REPORT" | grep "^- \[" | wc -l)
    
    echo "📊 Assessment requirements:"
    echo "  - Priority 1 (Must Fix): $PRIORITY_1 items"
    
    # Check for evidence of fixes
    echo "🔍 Checking for fix evidence in commits..."
    
    # Look for commits referencing the assessment
    FIX_COMMITS=$(git log --oneline | grep -i "phase.*assess\|priority.*1\|must.*fix" | wc -l)
    
    echo "  - Found $FIX_COMMITS commits referencing fixes"
    
    if [ $FIX_COMMITS -ge $PRIORITY_1 ]; then
        echo "✅ Sufficient fix commits found"
        return 0
    else
        echo "⚠️ May need additional verification"
        return 1
    fi
}

PHASE=$(yq '.current_phase' orchestrator-state.json)
verify_phase_integration $PHASE
```

### 5. Run Phase-Level Tests

```bash
#!/bin/bash
# Run comprehensive phase-level tests

run_phase_tests() {
    local PHASE=$1
    
    echo "🧪 Running phase-level integration tests..."
    
    # Run all tests for the phase
    if [ -f "tests/phase${PHASE}/run-all.sh" ]; then
        bash "tests/phase${PHASE}/run-all.sh"
    else
        echo "ℹ️ No phase-specific tests found"
    fi
    
    # Run general integration tests
    echo "🧪 Running general integration tests..."
    make test-integration || {
        echo "❌ Integration tests failed!"
        return 1
    }
    
    echo "✅ All phase tests passed"
    return 0
}

PHASE=$(yq '.current_phase' orchestrator-state.json)
run_phase_tests $PHASE
```

### 6. Create Integration Summary

```bash
#!/bin/bash
# Create comprehensive phase integration summary

create_phase_integration_summary() {
    local PHASE=$1
    local BRANCH=$2
    local TIMESTAMP=$(date -u +%Y-%m-%dT%H:%M:%SZ)
    
    cat > "phase-integrations/phase${PHASE}/integration-summary.md" << EOF
# Phase ${PHASE} Integration Summary

**Integration Branch:** ${BRANCH}
**Created At:** ${TIMESTAMP}
**Integration Type:** Post-Assessment-Fixes

## Included Components

### Wave Integration Branches
$(git log --oneline | grep "Merge wave integration" | sed 's/^/- /')

### ERROR_RECOVERY Fix Branches  
$(git log --oneline | grep "Merge ERROR_RECOVERY" | sed 's/^/- /')

## Issues Addressed

### From Phase Assessment Report
$(grep "Priority 1" -A10 "phase-assessments/phase${PHASE}/PHASE-${PHASE}-ASSESSMENT-REPORT.md" | grep "^- \[")

## Validation Results

- ✅ All wave branches merged successfully
- ✅ All fix branches integrated
- ✅ No merge conflicts remaining
- ✅ Phase-level tests passing
- ✅ Ready for architect reassessment

## Next Steps

1. Push integration branch to remote
2. Transition to SPAWN_ARCHITECT_PHASE_ASSESSMENT
3. Await architect reassessment with fixes integrated
EOF
    
    echo "📄 Integration summary created"
}
```

## State Tracking Updates

```yaml
# Update orchestrator-state.json
phase_integration_branches:
  - phase: 3
    branch: "phase3-post-fixes-integration-20250827-143000"
    created_at: "2025-08-27T14:30:00Z"
    integration_type: "post_assessment_fixes"
    includes_waves: [1, 2, 3, 4]
    includes_fixes: 
      - "phase3-fix-kcp-patterns-20250827-120000"
      - "phase3-fix-api-compatibility-20250827-130000"  
      - "phase3-fix-test-coverage-20250827-135000"
    original_assessment_report: "phase-assessments/phase3/PHASE-3-ASSESSMENT-REPORT.md"
    assessment_score_before_fixes: 68
    ready_for_reassessment: true
    
error_recovery_completed:
  - phase: 3
    recovery_type: "PHASE_ASSESSMENT_NEEDS_WORK"
    completed_at: "2025-08-27T14:25:00Z"
    fixes_applied: 5
  integration_branch_created: false  # Will be true after PHASE_INTEGRATION
```

## Validation Functions

```python
def validate_phase_integration_branch():
    """Validate phase integration branch is ready for reassessment"""
    
    phase = read_yaml('orchestrator-state.json')['current_phase']
    
    # Check branch exists
    branch_pattern = f"phase{phase}-post-fixes-integration-*"
    branches = subprocess.check_output(
        f"git branch -r | grep '{branch_pattern}'",
        shell=True
    ).decode().strip()
    
    if not branches:
        return {
            'valid': False,
            'error': 'No phase integration branch found'
        }
    
    # Verify all waves included
    wave_count = read_yaml('orchestrator-state.json')['waves_per_phase'][phase-1]
    
    for wave in range(1, wave_count + 1):
        wave_branch = f"phase{phase}-wave{wave}-integration"
        merge_found = subprocess.call(
            f"git log --oneline | grep -q 'Merge.*{wave_branch}'",
            shell=True
        ) == 0
        
        if not merge_found:
            return {
                'valid': False,
                'error': f'Wave {wave} not integrated'
            }
    
    # Verify ERROR_RECOVERY fixes merged
    fixes_found = subprocess.call(
        "git log --oneline | grep -q 'ERROR_RECOVERY fixes'",
        shell=True
    ) == 0
    
    if not fixes_found:
        return {
            'valid': False,
            'error': 'ERROR_RECOVERY fixes not integrated'
        }
    
    return {
        'valid': True,
        'branch': branches.split('\n')[0].strip(),
        'ready_for_reassessment': True
    }
```

## State Transitions

From PHASE_INTEGRATION state:
- **SUCCESS** → SPAWN_ARCHITECT_PHASE_ASSESSMENT (reassessment with integrated fixes)
- **MERGE_CONFLICTS** → ERROR_RECOVERY (resolve conflicts)
- **TEST_FAILURES** → ERROR_RECOVERY (fix test issues)
- **VALIDATION_FAILED** → ERROR_RECOVERY (missing fixes)

To PHASE_INTEGRATION state:
- **ERROR_RECOVERY** → PHASE_INTEGRATION (after phase assessment fixes complete)

## Critical Success Criteria

Before transitioning to SPAWN_ARCHITECT_PHASE_ASSESSMENT:
1. ✅ Phase integration branch created and pushed
2. ✅ All wave integration branches merged
3. ✅ All ERROR_RECOVERY fix branches merged
4. ✅ No unresolved merge conflicts
5. ✅ Phase-level tests passing
6. ✅ Integration summary document created
7. ✅ State file updated with integration details
8. ✅ Original assessment report issues verified as addressed

## Common Mistakes to Avoid

1. **Creating branch from wrong base**
   - ❌ WRONG: Branch from current work branch
   - ✅ RIGHT: Branch from clean main

2. **Missing wave integrations**
   - ❌ WRONG: Only merge some waves
   - ✅ RIGHT: Merge ALL waves from the phase

3. **Skipping fix branches**
   - ❌ WRONG: Forget ERROR_RECOVERY fixes
   - ✅ RIGHT: Include all fix branches

4. **Not verifying against report**
   - ❌ WRONG: Assume fixes are complete
   - ✅ RIGHT: Verify each issue from assessment report

5. **Wrong state transition**
   - ❌ WRONG: Go directly to PHASE_COMPLETE
   - ✅ RIGHT: Go to SPAWN_ARCHITECT_PHASE_ASSESSMENT for reassessment

## Integration Checklist

- [ ] Phase integration branch created from main
- [ ] All wave integration branches identified
- [ ] Each wave branch merged successfully  
- [ ] All fix branches identified from ERROR_RECOVERY
- [ ] Each fix branch merged successfully
- [ ] Merge conflicts resolved if any
- [ ] Phase-level tests executed and passing
- [ ] Integration summary document created
- [ ] State file updated with branch details
- [ ] Branch pushed to remote repository
- [ ] Ready to spawn architect for reassessment

## Quick Reference

```bash
# Essential commands for PHASE_INTEGRATION
PHASE=$(yq '.current_phase' orchestrator-state.json)
BRANCH="phase${PHASE}-post-fixes-integration-$(date +%Y%m%d-%H%M%S)"

# Create integration branch
git checkout main && git pull
git checkout -b "$BRANCH"

# Merge waves
git branch -r | grep "phase${PHASE}-wave" | while read branch; do
    git merge "$branch" --no-ff
done

# Merge fixes
git branch -r | grep "phase${PHASE}-fix" | while read branch; do
    git merge "$branch" --no-ff
done

# Push for reassessment
git push -u origin "$BRANCH"

# Update state and transition
yq -i ".phase_integration_branches += [{\"phase\": $PHASE, \"branch\": \"$BRANCH\"}]" orchestrator-state.json
yq -i '.current_state = "SPAWN_ARCHITECT_PHASE_ASSESSMENT"' orchestrator-state.json
```

### 🔴🔴🔴 RULE R233 - States Are Verbs (CRITICAL)
**SEE**: `$CLAUDE_PROJECT_DIR/rule-library/R233-all-states-immediate-action.md`