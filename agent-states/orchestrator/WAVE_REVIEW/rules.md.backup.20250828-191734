# Orchestrator - WAVE_REVIEW State Rules

## üö® WAVE_REVIEW IS A VERB - START REVIEW PROCESS IMMEDIATELY! üö®

### IMMEDIATE ACTIONS UPON ENTERING WAVE_REVIEW

**THE MOMENT YOU ENTER THIS STATE, YOU MUST:**
1. Spawn Architect for wave review NOW
2. Provide integration branch for review
3. Check TodoWrite for pending items and process them
4. Include all effort completion status

**FORBIDDEN - AUTOMATIC FAILURE:**
- ‚ùå "STATE TRANSITION COMPLETE: Now in WAVE_REVIEW" [stops]
- ‚ùå "Successfully entered WAVE_REVIEW state" [waits]
- ‚ùå "Ready to start review process" [pauses]
- ‚ùå "I'm in WAVE_REVIEW state" [does nothing]

**REQUIRED - IMMEDIATE ACTION:**
- ‚úÖ "Entering WAVE_REVIEW, Spawn Architect for wave review NOW..."
- ‚úÖ "START REVIEW PROCESS, provide integration branch for review..."
- ‚úÖ "WAVE_REVIEW: Include all effort completion status..."

## State Context
You are requesting an architect review of a completed wave's integration. The architect will assess the integrated code for architectural compliance, patterns, and readiness to proceed.

## üî¥üî¥üî¥ CRITICAL: MANDATORY STATE FILE UPDATE (R252) üî¥üî¥üî¥

### IMMEDIATELY upon entering WAVE_REVIEW state:

```bash
# 1. Update state machine
update_orchestrator_state "WAVE_REVIEW" "Requesting architect review of wave integration"

# 2. Record review request in state file
yq -i ".current_review.type = \"WAVE_INTEGRATION\"" orchestrator-state.yaml
yq -i ".current_review.phase = $PHASE" orchestrator-state.yaml
yq -i ".current_review.wave = $WAVE" orchestrator-state.yaml
yq -i ".current_review.requested_at = \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\"" orchestrator-state.yaml
yq -i ".current_review.integration_branch = \"$INTEGRATION_BRANCH\"" orchestrator-state.yaml
yq -i ".current_review.status = \"PENDING\"" orchestrator-state.yaml
```

## Primary Purpose

The WAVE_REVIEW state is for:
1. Spawning an architect reviewer to assess wave integration
2. Waiting for architect feedback
3. Processing architect decision (APPROVED/CHANGES_REQUIRED/REJECTED)
4. Determining next state based on review outcome

## Architect Review Scope

The architect should review:
- **Integration Quality**: Clean merges, no conflicts remaining
- **Architectural Compliance**: Patterns followed correctly
- **Multi-tenancy**: Proper workspace/cluster isolation
- **API Consistency**: Consistent API design across efforts
- **Test Coverage**: Adequate testing at integration level
- **Performance**: No obvious performance issues introduced
- **Dependencies**: Proper dependency management

## Spawning the Architect

```bash
# Prepare architect review request
REVIEW_CONTEXT="Wave $WAVE Integration Review for Phase $PHASE"
INTEGRATION_BRANCH=$(get_wave_integration_branch_name "$PHASE" "$WAVE")

# Key information for architect
REVIEW_PROMPT="Review the integrated wave $WAVE code in branch $INTEGRATION_BRANCH. 
Focus on:
1. Architectural patterns compliance
2. Multi-tenancy implementation
3. API consistency
4. Integration quality
5. Test coverage adequacy

Provide decision: APPROVED, CHANGES_REQUIRED, or REJECTED with detailed feedback."

# Spawn architect reviewer
Task: subagent_type="architect-reviewer" \
      prompt="$REVIEW_PROMPT" \
      description="Architect review of Phase $PHASE Wave $WAVE integration"
```

## üö®üö®üö® RULE R258 - Mandatory Wave Review Report Verification [BLOCKING]

**BEFORE processing ANY architect decision, you MUST verify the wave review report exists:**

```bash
# MANDATORY: Verify wave review report exists (R258)
verify_wave_review_report() {
    local PHASE=$1
    local WAVE=$2
    local REPORT_FILE="wave-reviews/phase${PHASE}/wave${WAVE}/PHASE-${PHASE}-WAVE-${WAVE}-REVIEW-REPORT.md"
    
    if [ ! -f "$REPORT_FILE" ]; then
        echo "‚ùå CRITICAL: No wave review report found!"
        echo "‚ùå Expected: $REPORT_FILE"
        echo "‚ùå R258 VIOLATION: Cannot proceed without wave review report"
        transition_to "ERROR_RECOVERY"
        exit 1
    fi
    
    # Extract decision from report
    local DECISION=$(grep "^\*\*DECISION\*\*:" "$REPORT_FILE" | cut -d: -f2 | xargs)
    
    case "$DECISION" in
        PROCEED_NEXT_WAVE|PROCEED_PHASE_ASSESSMENT|CHANGES_REQUIRED|WAVE_FAILED)
            echo "‚úÖ Wave review report verified with decision: $DECISION"
            ;;
        *)
            echo "‚ùå Invalid decision in report: $DECISION"
            transition_to "ERROR_RECOVERY"
            exit 1
            ;;
    esac
    
    # Update state with report location
    yq -i ".wave_review.report_file = \"$REPORT_FILE\"" orchestrator-state.yaml
    yq -i ".wave_review.decision = \"$DECISION\"" orchestrator-state.yaml
    
    return 0
}

# MUST call this FIRST before processing any decision
verify_wave_review_report "$CURRENT_PHASE" "$CURRENT_WAVE"
```

## Processing Architect Decision (Based on Report)

### If PROCEED_NEXT_WAVE:
```bash
# Architect approved wave, proceed to next wave
yq -i ".current_review.status = \"APPROVED\"" orchestrator-state.yaml
yq -i ".current_review.completed_at = \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\"" orchestrator-state.yaml
yq -i ".current_review.decision = \"PROCEED_NEXT_WAVE\"" orchestrator-state.yaml

# Transition to plan next wave
transition_to "PLANNING"  # Plan next wave
```

### If PROCEED_PHASE_ASSESSMENT:
```bash
# Last wave approved, ready for phase assessment
yq -i ".current_review.status = \"APPROVED\"" orchestrator-state.yaml
yq -i ".current_review.completed_at = \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\"" orchestrator-state.yaml
yq -i ".current_review.decision = \"PROCEED_PHASE_ASSESSMENT\"" orchestrator-state.yaml

# CRITICAL: Must get architect phase assessment before SUCCESS
transition_to "SPAWN_ARCHITECT_PHASE_ASSESSMENT"  # Request phase assessment
```

### If CHANGES_REQUIRED:
```bash
# Wave needs fixes before proceeding
yq -i ".current_review.status = \"CHANGES_REQUIRED\"" orchestrator-state.yaml
yq -i ".current_review.completed_at = \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\"" orchestrator-state.yaml
yq -i ".current_review.decision = \"CHANGES_REQUIRED\"" orchestrator-state.yaml

# CRITICAL: Setup ERROR_RECOVERY context with report location (R258)
REPORT_FILE=$(yq '.wave_review.report_file' orchestrator-state.yaml)
echo "üìã Setting up ERROR_RECOVERY context for wave review fixes..."

# Extract specific issues from report for ERROR_RECOVERY to process
ISSUES=$(sed -n '/## Issues Identified/,/## Required Actions/p' "$REPORT_FILE")
REQUIRED_ACTIONS=$(sed -n '/## Required Actions/,/## Recommendations/p' "$REPORT_FILE")

# Store in state file for ERROR_RECOVERY
yq -i ".error_recovery.source = \"WAVE_REVIEW_CHANGES_REQUIRED\"" orchestrator-state.yaml
yq -i ".error_recovery.report_to_read = \"$REPORT_FILE\"" orchestrator-state.yaml
yq -i ".error_recovery.phase = $CURRENT_PHASE" orchestrator-state.yaml
yq -i ".error_recovery.wave = $CURRENT_WAVE" orchestrator-state.yaml
yq -i ".wave_review.issues_identified = \"$ISSUES\"" orchestrator-state.yaml
yq -i ".wave_review.required_actions = \"$REQUIRED_ACTIONS\"" orchestrator-state.yaml

echo "‚ùå Wave review returned CHANGES_REQUIRED - transitioning to ERROR_RECOVERY"
echo "üìÑ ERROR_RECOVERY must read report: $REPORT_FILE"

# Transition to fix issues - ERROR_RECOVERY will read report and coordinate fixes
transition_to "ERROR_RECOVERY"
```

### If WAVE_FAILED:
```bash
# Major architectural problems, cannot proceed
yq -i ".current_review.status = \"FAILED\"" orchestrator-state.yaml
yq -i ".current_review.completed_at = \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\"" orchestrator-state.yaml
yq -i ".current_review.decision = \"WAVE_FAILED\"" orchestrator-state.yaml

# CRITICAL: Setup ERROR_RECOVERY context for major rework (R258)
REPORT_FILE=$(yq '.wave_review.report_file' orchestrator-state.yaml)
echo "‚ùå‚ùå‚ùå Wave review returned WAVE_FAILED - major architectural issues detected"

# Extract all issues for comprehensive rework
ISSUES=$(sed -n '/## Issues Identified/,/## Required Actions/p' "$REPORT_FILE")
CRITICAL_ISSUES=$(grep -A2 "\*\*\[CRITICAL\]\*\*" "$REPORT_FILE")

# Store in state file for ERROR_RECOVERY major rework
yq -i ".error_recovery.source = \"WAVE_FAILED\"" orchestrator-state.yaml
yq -i ".error_recovery.severity = \"CRITICAL\"" orchestrator-state.yaml
yq -i ".error_recovery.report_to_read = \"$REPORT_FILE\"" orchestrator-state.yaml
yq -i ".error_recovery.phase = $CURRENT_PHASE" orchestrator-state.yaml
yq -i ".error_recovery.wave = $CURRENT_WAVE" orchestrator-state.yaml
yq -i ".wave_review.critical_issues = \"$CRITICAL_ISSUES\"" orchestrator-state.yaml
yq -i ".wave_review.all_issues = \"$ISSUES\"" orchestrator-state.yaml

echo "üìÑ ERROR_RECOVERY must read full report for major rework: $REPORT_FILE"

# Major issues require significant rework
transition_to "ERROR_RECOVERY"
```

## State Transitions

From WAVE_REVIEW (based on R258 report decision):
- **PROCEED_NEXT_WAVE** ‚Üí PLANNING (plan and start next wave)
- **PROCEED_PHASE_ASSESSMENT** ‚Üí SPAWN_ARCHITECT_PHASE_ASSESSMENT (trigger phase assessment)
- **CHANGES_REQUIRED** ‚Üí ERROR_RECOVERY or SPAWN_AGENTS (fix identified issues)
- **WAVE_FAILED** ‚Üí ERROR_RECOVERY (major architectural rework needed)
- **NO REPORT** ‚Üí ERROR_RECOVERY (R258 violation - cannot proceed without report)
- **TIMEOUT** ‚Üí MONITOR (check status)

**CRITICAL**: Never transition directly to SUCCESS from WAVE_REVIEW. If this is the last wave of the phase, MUST transition to SPAWN_ARCHITECT_PHASE_ASSESSMENT for phase-level validation.

## Review Tracking

```yaml
# State file structure for reviews
wave_reviews:
  phase1_wave1:
    requested_at: "2025-08-25T22:00:00Z"
    architect_spawned: "architect-123456"
    integration_branch: "tmc-workspace/phase1/wave1-integration"
    decision: "APPROVED"
    feedback: |
      - Good architectural patterns
      - Multi-tenancy properly implemented
      - Minor suggestion: improve error handling in webhook controller
    completed_at: "2025-08-25T22:15:00Z"
    next_action: "PLANNING"  # Plan wave 2
```

## Timeout Handling

If architect doesn't respond within reasonable time:
```bash
# Check timeout (e.g., 30 minutes)
REQUESTED_AT=$(yq '.current_review.requested_at' orchestrator-state.yaml)
if [ timeout_exceeded ]; then
    # Log timeout
    yq -i ".current_review.status = \"TIMEOUT\"" orchestrator-state.yaml
    
    # Transition to MONITOR to check manually
    transition_to "MONITOR"
fi
```

## Success Criteria

The wave review is successful when:
- [ ] Architect provides clear APPROVED decision
- [ ] No blocking architectural issues found
- [ ] Integration quality validated
- [ ] All patterns properly followed
- [ ] Multi-tenancy correctly implemented
- [ ] Test coverage adequate

## Common Issues to Watch For

1. **Missing Patterns**: Not following established architectural patterns
2. **Isolation Violations**: Multi-tenancy boundaries not respected
3. **API Inconsistency**: Different efforts using different API styles
4. **Test Gaps**: Integration tests missing critical paths
5. **Performance Issues**: Obvious performance problems in integrated code
6. **Dependency Conflicts**: Incompatible dependencies between efforts

## Next Steps After Approval

1. Record approval in state file
2. Tag integration branch as reviewed
3. Determine if more waves exist
4. Either plan next wave or mark phase complete
5. Update metrics and reporting

## Required State File Updates

Before leaving WAVE_REVIEW state:
- [ ] Review decision recorded
- [ ] Feedback captured
- [ ] Completion timestamp set
- [ ] Next action determined
- [ ] Any issues documented
- [ ] Metrics updated