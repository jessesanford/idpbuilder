# Orchestrator - SETUP_EFFORT_INFRASTRUCTURE State Rules

## üìã PRIMARY DIRECTIVES FOR SETUP_EFFORT_INFRASTRUCTURE

**YOU MUST READ EACH RULE LISTED HERE. YOUR READ TOOL CALLS ARE BEING MONITORED.**

### State-Specific Rules (NOT in orchestrator.md):
1. **R191** - Target Repository Configuration
   - File: `$CLAUDE_PROJECT_DIR/rule-library/R191-target-repository-configuration.md`
   - Criticality: BLOCKING - Must load config before proceeding
   
2. **R176** - Effort Infrastructure Setup  
   - File: `$CLAUDE_PROJECT_DIR/rule-library/R176-effort-infrastructure-setup.md`
   - Criticality: BLOCKING - Create all effort directories

3. **R271** - Full Checkouts Only
   - File: `$CLAUDE_PROJECT_DIR/rule-library/R271-full-checkouts-only.md`
   - Criticality: SUPREME LAW - No sparse checkouts allowed

**Note**: R234, R208, R221, R187, R252 are already in your orchestrator.md Supreme Laws section.

## üìã RULE SUMMARY FOR SETUP_EFFORT_INFRASTRUCTURE STATE

### Rules Enforced in This State:
- R234: Mandatory State Traversal [SUPREME LAW #1 - NO SKIPPING!]
- R208: CD Before Spawn [SUPREME LAW #2 - Always CD first]
- R221: Bash Directory Reset [SUPREME LAW #3 - CD in every command]
- R191: Target Repository Configuration [BLOCKING - Must load config]
- R176: Effort Infrastructure Setup [BLOCKING - Create all directories]
- R271: Full Checkouts Only [SUPREME LAW - No sparse checkouts]
- R187: TODO Save Triggers [BLOCKING - Save within 30s]
- R252: State File Updates [SUPREME LAW #10 - Update on transition]

### Critical Requirements:
1. Load target-repo-config.yaml FIRST - Penalty: -100%
2. Create ALL effort directories - Penalty: -50%
3. Clone FULL repos (no sparse) - Penalty: -100%
4. Push all branches to remote - Penalty: -30%
5. Must transition to ANALYZE_CODE_REVIEWER_PARALLELIZATION - Penalty: -100%

### Success Criteria:
- ‚úÖ Target config loaded and validated
- ‚úÖ All effort directories created under /efforts/
- ‚úÖ All repos are FULL clones (R271)
- ‚úÖ All branches pushed with tracking
- ‚úÖ work-log.md files initialized

### Failure Triggers:
- ‚ùå Skip to SPAWN_AGENTS = -100% R234 VIOLATION
- ‚ùå Clone wrong repository = AUTOMATIC FAILURE
- ‚ùå Sparse checkout detected = R271 VIOLATION
- ‚ùå Missing target-repo-config.yaml = Cannot proceed

## üö® SETUP_EFFORT_INFRASTRUCTURE IS A VERB - CREATE INFRASTRUCTURE NOW! üö®

### IMMEDIATE ACTIONS UPON ENTERING SETUP_EFFORT_INFRASTRUCTURE

**THE MOMENT YOU ENTER THIS STATE, YOU MUST:**
1. Start creating effort directories NOW using prepare_effort_for_agent()
2. Initialize Git branches for each effort immediately
3. Set up remote tracking for all branches without delay
4. Check TodoWrite for pending infrastructure tasks
5. Create standard subdirectories (src/, tests/, docs/) immediately

**FORBIDDEN - AUTOMATIC FAILURE:**
- ‚ùå "STATE TRANSITION COMPLETE: Now in SETUP_EFFORT_INFRASTRUCTURE" [stops]
- ‚ùå "Successfully entered SETUP_EFFORT_INFRASTRUCTURE state" [waits]
- ‚ùå "Ready to set up infrastructure" [pauses]
- ‚ùå "I'm in infrastructure setup state" [does nothing]

**REQUIRED - IMMEDIATE ACTION:**
- ‚úÖ "Entering SETUP_EFFORT_INFRASTRUCTURE, creating E3.1.1 directory now..."
- ‚úÖ "Setting up infrastructure, cloning repo for E3.1.1..."
- ‚úÖ "SETUP_EFFORT_INFRASTRUCTURE: Creating branch for E3.1.1..."

## State Context
You are setting up infrastructure for all efforts in the wave BEFORE spawning code reviewers to create effort plans - DO IT NOW!

## üî¥üî¥üî¥ SUPREME LAW R234 - MANDATORY STATE TRAVERSAL üî¥üî¥üî¥

**THIS IS THE HIGHEST LAW - SUPERSEDES ALL OTHER RULES!**

### MANDATORY NEXT STATE: ANALYZE_CODE_REVIEWER_PARALLELIZATION

**YOU MUST FOLLOW THIS EXACT SEQUENCE:**
```
SETUP_EFFORT_INFRASTRUCTURE (YOU ARE HERE)
    ‚Üì (CANNOT SKIP - MANDATORY)
ANALYZE_CODE_REVIEWER_PARALLELIZATION
    ‚Üì (CANNOT SKIP - MANDATORY)
SPAWN_CODE_REVIEWERS_EFFORT_PLANNING
    ‚Üì (CANNOT SKIP - MANDATORY)
WAITING_FOR_EFFORT_PLANS
    ‚Üì (CANNOT SKIP - MANDATORY)
ANALYZE_IMPLEMENTATION_PARALLELIZATION
    ‚Üì (CANNOT SKIP - MANDATORY)
SPAWN_AGENTS
```

**‚ùå‚ùå‚ùå FORBIDDEN TRANSITIONS (AUTOMATIC -100% FAILURE):**
- ‚ùå SETUP_EFFORT_INFRASTRUCTURE ‚Üí SPAWN_AGENTS (skipping analysis)
- ‚ùå SETUP_EFFORT_INFRASTRUCTURE ‚Üí SPAWN_CODE_REVIEWERS_EFFORT_PLANNING (skipping analysis)
- ‚ùå ANY attempt to "optimize" by skipping states

**ACKNOWLEDGMENT REQUIRED:**
"I acknowledge R234: I MUST transition to ANALYZE_CODE_REVIEWER_PARALLELIZATION next, not skip ahead."

## üî¥üî¥üî¥ CRITICAL: LOAD TARGET CONFIG FIRST (R191) üî¥üî¥üî¥

### BEFORE ANY INFRASTRUCTURE SETUP, YOU MUST:
```bash
# MANDATORY FIRST ACTION IN THIS STATE
echo "üî¥ R191: Loading target repository configuration..."

# Check if already loaded
if [ -z "$TARGET_REPO_URL" ]; then
    echo "‚ö†Ô∏è Target config not loaded, loading now..."
    
    if [ ! -f "$SF_ROOT/target-repo-config.yaml" ]; then
        echo "üî¥üî¥üî¥ CRITICAL: target-repo-config.yaml NOT FOUND!"
        echo "Cannot set up infrastructure without knowing WHAT to clone!"
        exit 191
    fi
    
    # Load and validate config
    TARGET_REPO_URL=$(yq '.target_repository.url' "$SF_ROOT/target-repo-config.yaml")
    BASE_BRANCH=$(yq '.target_repository.base_branch' "$SF_ROOT/target-repo-config.yaml")
    PROJECT_PREFIX=$(yq '.branch_naming.project_prefix' "$SF_ROOT/target-repo-config.yaml")
    
    if [ -z "$TARGET_REPO_URL" ] || [ "$TARGET_REPO_URL" = "null" ]; then
        echo "üî¥ ERROR: No target repository URL in config!"
        exit 191
    fi
    
    export TARGET_REPO_URL
    export BASE_BRANCH
    export PROJECT_PREFIX
fi

echo "‚úÖ Target repository: $TARGET_REPO_URL"
echo "‚úÖ This is what will be CLONED into efforts/"
echo "‚ö†Ô∏è NEVER create code in the Software Factory repo itself!"
```

### UNDERSTAND THE TWO REPOSITORIES:
1. **Software Factory Repo** = Where you are now (rules, agents, state)
2. **Target Repo** = What you clone from config (actual project code)

**VIOLATIONS THAT CAUSE FAILURE:**
- Cloning the SF repo into efforts/ = WRONG REPO
- Creating code in SF repo = WRONG LOCATION
- Not having target-repo-config.yaml = CANNOT PROCEED

## üî¥üî¥üî¥ MANDATORY: Infrastructure BEFORE Planning üî¥üî¥üî¥

**THIS IS THE CORRECT SEQUENCE:**
1. Architect creates Wave Architecture Plan
2. Code Reviewer creates Wave Implementation Plan
3. **Orchestrator sets up ALL effort infrastructure** ‚Üê YOU ARE HERE
4. Code Reviewers create individual Effort Implementation Plans
5. SW Engineers implement

---
### üö® RULE R176 - Effort Infrastructure Setup
**Source:** rule-library/RULE-REGISTRY.md#R176
**Criticality:** BLOCKING - Code Reviewers need directories to work in

YOU MUST CREATE FOR EACH EFFORT:
1. Effort directory (/efforts/phase{X}/wave{Y}/{effort-name})
2. FULL single-branch git clone (R271 SUPREME LAW - NO SPARSE!)
3. Branch with project prefix from target-repo-config.yaml
4. Push branch to remote with tracking
5. Standard subdirectories (src/, tests/, docs/)
6. Initial work-log.md file
---

## Infrastructure Setup Protocol (R271 SUPREME LAW - Full Checkouts)

```bash
# MANDATORY: Use prepare_effort_for_agent() for EACH effort
prepare_effort_for_agent() {
    local PHASE=$1 WAVE=$2 EFFORT=$3
    
    echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
    echo "üîß SETTING UP INFRASTRUCTURE FOR: $EFFORT"
    echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
    
    # 1. THINK - Determine the appropriate base branch
    echo "üß† THINKING: What base branch should $EFFORT be based on?"
    
    # Check dependencies in orchestrator-state.yaml
    DEPENDENCIES=$(yq ".efforts_planned.\"$EFFORT\".depends_on[]" "$SF_ROOT/orchestrator-state.yaml" 2>/dev/null)
    
    if [ -z "$DEPENDENCIES" ] || [ "$DEPENDENCIES" = "null" ]; then
        # No dependencies - use default base branch
        BASE_BRANCH=$(yq '.target_repository.base_branch' "$SF_ROOT/target-repo-config.yaml")
        if [ -z "$BASE_BRANCH" ] || [ "$BASE_BRANCH" = "null" ]; then
            BASE_BRANCH="main"  # Fallback to main
        fi
        echo "üìå Decision: Using base branch '$BASE_BRANCH' (no dependencies)"
    else
        # Has dependencies - check if dependency branch exists
        FIRST_DEP=$(echo "$DEPENDENCIES" | head -n1)
        DEP_BRANCH=$(yq ".efforts_completed.\"$FIRST_DEP\".branch" "$SF_ROOT/orchestrator-state.yaml" 2>/dev/null)
        if [ -n "$DEP_BRANCH" ] && [ "$DEP_BRANCH" != "null" ]; then
            BASE_BRANCH="$DEP_BRANCH"
            echo "üìå Decision: Using branch '$BASE_BRANCH' from dependency $FIRST_DEP"
        else
            BASE_BRANCH=$(yq '.target_repository.base_branch' "$SF_ROOT/target-repo-config.yaml")
            echo "üìå Decision: Using default '$BASE_BRANCH' (dependency not ready)"
        fi
    fi
    
    # 2. Create effort directory under /efforts/ root
    EFFORT_DIR="/efforts/phase${PHASE}/wave${WAVE}/${EFFORT}"
    mkdir -p "$(dirname "$EFFORT_DIR")"
    
    # 3. SINGLE-BRANCH FULL CLONE (R271 Supreme Law)
    echo "üì¶ Creating FULL clone from branch: $BASE_BRANCH"
    
    # CRITICAL: Get target repo URL from config (NOT the SF repo!)
    TARGET_REPO_URL=$(yq '.target_repository.url' "$SF_ROOT/target-repo-config.yaml")
    
    if [ -z "$TARGET_REPO_URL" ] || [ "$TARGET_REPO_URL" = "null" ]; then
        echo "üî¥üî¥üî¥ R191 VIOLATION: No target repository URL!"
        echo "Cannot clone without target-repo-config.yaml!"
        exit 191
    fi
    
    echo "üéØ Cloning TARGET repository: $TARGET_REPO_URL"
    echo "‚ö†Ô∏è This is NOT the Software Factory repo!"
    
    git clone \
        --single-branch \
        --branch "$BASE_BRANCH" \
        "$TARGET_REPO_URL" \
        "$EFFORT_DIR"
    
    if [ $? -ne 0 ]; then
        echo "‚ùå Clone failed! Check if base branch '$BASE_BRANCH' exists"
        exit 1
    fi
    
    cd "$EFFORT_DIR"
    
    # 4. Create and push effort branch (WITH PROJECT PREFIX!)
    PROJECT_PREFIX=$(yq '.branch_naming.project_prefix' "$SF_ROOT/target-repo-config.yaml")
    if [ -n "$PROJECT_PREFIX" ] && [ "$PROJECT_PREFIX" != "null" ]; then
        BRANCH="${PROJECT_PREFIX}/phase${PHASE}/wave${WAVE}/${EFFORT}"
    else
        BRANCH="phase${PHASE}/wave${WAVE}/${EFFORT}"
    fi
    
    echo "üåø Creating effort branch: $BRANCH"
    git checkout -b "$BRANCH"
    git push -u origin "$BRANCH"
    
    # 5. Create work-log.md with base branch documentation
    echo "# Work Log for $EFFORT" > work-log.md
    echo "" >> work-log.md
    echo "## Infrastructure Details" >> work-log.md
    echo "- **Branch**: $BRANCH" >> work-log.md
    echo "- **Base Branch**: $BASE_BRANCH" >> work-log.md
    echo "- **Clone Type**: FULL (R271 compliance)" >> work-log.md
    echo "- **Created**: $(date)" >> work-log.md
    echo "" >> work-log.md
    echo "## Base Branch Selection Rationale" >> work-log.md
    if [ -z "$DEPENDENCIES" ] || [ "$DEPENDENCIES" = "null" ]; then
        echo "No dependencies - using repository default base branch" >> work-log.md
    else
        echo "Based on dependency: $DEPENDENCIES" >> work-log.md
    fi
    
    # 6. Verify FULL workspace (R271 compliance check)
    echo "üîç Verifying full checkout..."
    if [ -f ".git/info/sparse-checkout" ]; then
        echo "üî¥üî¥üî¥ SUPREME LAW VIOLATION: Sparse checkout detected!"
        exit 1
    fi
    
    # Show that we have the full codebase
    echo "‚úÖ Full codebase available:"
    ls -la | head -10
    echo "   ... (showing first 10 entries)"
    
    echo "‚úÖ Infrastructure ready for $EFFORT with FULL code from $BASE_BRANCH"
    cd "$SF_ROOT"  # Return to root
}
```

## Example: Setting Up Wave Infrastructure

```bash
# Read wave plan to get effort list
WAVE_PLAN="phase-plans/PHASE-1-WAVE-1-IMPLEMENTATION-PLAN.md"
EFFORTS=$(grep "^## Effort" "$WAVE_PLAN" | sed 's/## Effort [0-9]*: //')

# Setup infrastructure for ALL efforts
for effort in $EFFORTS; do
    prepare_effort_for_agent 1 1 "$effort"
done

echo "‚úÖ All effort infrastructure ready"
echo "üìã Ready to spawn Code Reviewers for effort planning"
```

## State Transition

After ALL infrastructure is ready:
1. Update orchestrator-state.yaml with effort directories
2. Verify all branches pushed to remote
3. **MANDATORY: Transition to ANALYZE_CODE_REVIEWER_PARALLELIZATION (R234)**
   - DO NOT skip to SPAWN_CODE_REVIEWERS_EFFORT_PLANNING
   - DO NOT skip to SPAWN_AGENTS
   - MUST follow the mandatory sequence!

### TODO PERSISTENCE CHECKPOINT (R187-R189)
```bash
# Before state transition - MANDATORY SAVE
echo "üíæ R187: Saving TODOs before state transition..."
save_todos "SETUP_EFFORT_INFRASTRUCTURE complete"

# R189: Commit within 60 seconds
cd $CLAUDE_PROJECT_DIR
git add todos/*.todo
git commit -m "todo: orchestrator - infrastructure setup complete"
git push
echo "‚úÖ TODOs persisted before transition"
```

## Common Mistakes to Avoid

‚ùå **WRONG:** Spawning Code Reviewers before creating directories
‚ùå **WRONG:** Forgetting project prefix in branch names
‚ùå **WRONG:** Not pushing branches to remote
‚ùå **WRONG:** Creating infrastructure one-by-one as needed

‚úÖ **CORRECT:** Create ALL infrastructure first, then spawn agents