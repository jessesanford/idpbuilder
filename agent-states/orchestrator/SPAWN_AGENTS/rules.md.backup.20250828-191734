# Orchestrator - SPAWN_AGENTS State Rules

## üìã PRIMARY DIRECTIVES FOR SPAWN_AGENTS

**YOU MUST READ EACH RULE LISTED HERE. YOUR READ TOOL CALLS ARE BEING MONITORED.**

### State-Specific Rules (NOT in orchestrator.md):
1. **R052** - Agent Spawning Protocol
   - File: `$CLAUDE_PROJECT_DIR/rule-library/R052-agent-spawning-protocol.md`
   - Criticality: CRITICAL - Complete context and deliverables required

2. **R197** - One Agent Per Effort
   - File: `$CLAUDE_PROJECT_DIR/rule-library/R197-one-agent-per-effort.md`
   - Criticality: BLOCKING - Never spawn multiple agents for same effort

3. **R255** - Post-Agent Work Verification
   - File: `$CLAUDE_PROJECT_DIR/rule-library/R255-post-agent-work-verification.md`
   - Criticality: BLOCKING - Verify correct locations after completion

**Note**: R151 (parallel timing), R208 (CD before spawn), R221 (bash reset) are already in orchestrator.md Supreme Laws.

## üö® SPAWN_AGENTS IS A VERB - START SPAWNING AGENTS IMMEDIATELY! üö®

### IMMEDIATE ACTIONS UPON ENTERING SPAWN_AGENTS

**THE MOMENT YOU ENTER THIS STATE, YOU MUST:**
1. Spawn SW Engineer for ready efforts NOW
2. Check implementation plans exist before spawning
3. Check TodoWrite for pending items and process them
4. Follow parallelization plan from state file

**FORBIDDEN - AUTOMATIC FAILURE:**
- ‚ùå "STATE TRANSITION COMPLETE: Now in SPAWN_AGENTS" [stops]
- ‚ùå "Successfully entered SPAWN_AGENTS state" [waits]
- ‚ùå "Ready to start spawning agents" [pauses]
- ‚ùå "I'm in SPAWN_AGENTS state" [does nothing]

**REQUIRED - IMMEDIATE ACTION:**
- ‚úÖ "Entering SPAWN_AGENTS, Spawn SW Engineer for ready efforts NOW..."
- ‚úÖ "START SPAWNING AGENTS, check implementation plans exist before spawning..."
- ‚úÖ "SPAWN_AGENTS: Follow parallelization plan from state file..."

## State Context
You are spawning SW Engineers to implement efforts based on the implementation plans created by Code Reviewers.

## üî¥üî¥üî¥ PREREQUISITES FOR SPAWN_AGENTS üî¥üî¥üî¥

**BEFORE ENTERING THIS STATE, YOU MUST ALREADY HAVE:**
1. ‚úÖ All effort directories created (done in SETUP_EFFORT_INFRASTRUCTURE)
2. ‚úÖ All git clones and branches ready (done in SETUP_EFFORT_INFRASTRUCTURE) 
3. ‚úÖ All effort IMPLEMENTATION-PLAN.md files (created by Code Reviewers)
4. ‚úÖ All work-log.md files initialized
5. ‚úÖ **PARALLELIZATION ANALYSIS COMPLETE (ANALYZE_IMPLEMENTATION_PARALLELIZATION)**
6. ‚úÖ **SW Engineer parallelization plan in orchestrator-state.json**

**IF PARALLELIZATION NOT ANALYZED, GO BACK TO ANALYZE_IMPLEMENTATION_PARALLELIZATION!**
**Infrastructure was created BEFORE Code Reviewers made plans!**
**Now you're just spawning SW Engineers to implement using the PRE-ANALYZED strategy.**

---
### üö® RULE R052.0.0 - Agent Spawning Protocol
**Source:** rule-library/RULE-REGISTRY.md#R052
**Criticality:** CRITICAL - Major impact on grading

SPAWNING REQUIREMENTS:
1. Provide complete context to each agent
2. Include all startup requirements
3. Specify deliverables clearly
4. Set size limits explicitly
5. Record spawn timestamp for grading
---

## Parallel Spawning

---
### üî¥üî¥üî¥ RULE R208 - SUPREME LAW #2: CD BEFORE SPAWN üî¥üî¥üî¥
**Source:** rule-library/R208-orchestrator-spawn-directory-protocol.md
**Criticality:** SUPREME LAW #2 - VIOLATION = -100% GRADE = AUTOMATIC FAILURE
**THIS RULE CANNOT BE OVERRIDDEN BY ANY OTHER RULE (except R234)**

**YOU MUST ALWAYS CD TO THE CORRECT DIRECTORY BEFORE SPAWNING - NO EXCEPTIONS!**

```bash
# MANDATORY FOR EVERY SINGLE SPAWN:
cd /path/to/effort/directory || exit 1
pwd  # MUST verify correct directory  
task spawn agent-name "instructions"
cd /original/directory  # Return after spawn
```

**VIOLATIONS = INSTANT -100% FAILURE:**
- ‚ùå Spawning without CD'ing first
- ‚ùå Assuming agent will CD itself
- ‚ùå Using --working-directory instead of CD
- ‚ùå Skipping pwd verification
- ‚ùå ANY attempt to bypass this protocol

---
### üö® RULE R151.0.0 - Parallel Spawn Timing WITH PWD VERIFICATION
**Source:** rule-library/R151-parallel-agent-spawning-timing.md
**Criticality:** CRITICAL - Major impact on grading (50% of orchestrator grade!)

CRITICAL GRADING REQUIREMENTS:

When spawning parallel agents YOU MUST:
1. CD to correct directory for EACH agent (R208 SUPREME LAW)
2. OUTPUT pwd to VERIFY directory before spawn (R208 SUPREME LAW)
3. Send ALL spawn commands in ONE message
4. Use multiple tool invocations in same message
5. MUST achieve <5s average delta or FAIL

**MANDATORY PWD VERIFICATION FORMAT:**
```bash
# FOR EACH AGENT IN THE PARALLEL SPAWN:
echo "üî¥ R208 SUPREME LAW: CD'ing to: efforts/phase1/wave1/effort-name"
cd efforts/phase1/wave1/effort-name || exit 1
echo "üìç R208 PWD VERIFICATION: $(pwd)"  # MUST SHOW ACTUAL PATH!
echo "‚úÖ R208 Confirmed in correct directory"
Task: agent-type
cd /workspaces/project  # R208: Return to orchestrator directory
```

‚ùå WRONG: Spawn without pwd verification = -100% FAIL
‚ùå WRONG: Spawn, wait for response, spawn next
‚úÖ RIGHT: CD + pwd + spawn + return for each, all in ONE message
---

## ‚úÖ Infrastructure Already Ready

Infrastructure was set up in SETUP_EFFORT_INFRASTRUCTURE state:
- Effort directories exist at: `efforts/phase{X}/wave{Y}/{effort-name}`
- Git branches created with project prefix from target-repo-config.yaml
- Remote tracking configured
- IMPLEMENTATION-PLAN.md files created by Code Reviewers
- work-log.md files initialized
- **SW Engineer parallelization plan in orchestrator-state.json**

**Just CD to directories and spawn SW Engineers per the analyzed plan!**

### R187-R189 TODO PERSISTENCE
```bash
# After all SW Engineers spawned
echo "üíæ R187: Saving TODOs after spawning SW Engineers..."
save_todos "SPAWN_AGENTS complete - all SW Engineers spawned"

# R189: Commit within 60 seconds
cd $CLAUDE_PROJECT_DIR
git add todos/*.todo orchestrator-state.json
git commit -m "todo: SW Engineers spawned, entering monitoring"
git push

# Transition to MONITOR
echo "‚û°Ô∏è Transitioning to MONITOR state..."
```

## Spawn Message Template WITH EXPLICIT DIRECTORY NAVIGATION

```markdown
# SPAWN SW ENGINEER WITH MANDATORY DIRECTORY NAVIGATION:
Task sw-engineer:
PURPOSE: Implement {effort_id} - {effort_name}

üî¥üî¥üî¥ CRITICAL: YOU WILL NOT BE IN THE RIGHT DIRECTORY! üî¥üî¥üî¥
YOU MUST NAVIGATE TO YOUR EFFORT DIRECTORY IMMEDIATELY!

TARGET_DIRECTORY: /efforts/phase{X}/wave{Y}/{effort-name}
EXPECTED_BRANCH: {PROJECT_PREFIX}/phase{X}/wave{Y}/{effort-name}

YOUR MANDATORY FIRST ACTIONS:
1. Echo your current directory: pwd
2. Navigate to effort directory: cd /efforts/phase{X}/wave{Y}/{effort-name}
3. Verify you're now in correct directory: pwd
4. Verify branch: git branch --show-current
5. If directory doesn't exist or branch is wrong:
   - STOP IMMEDIATELY
   - Report: "‚ùå ENVIRONMENT ERROR: Directory or branch incorrect"
   - Request orchestrator correction
6. Run R209 directory isolation protocol
7. Set readonly EFFORT_ISOLATION_DIR environment variable

BRANCH: {PROJECT_PREFIX}/phase{X}/wave{Y}/effort{Z}-{name}  # Include project prefix from target-repo-config.yaml!

REQUIREMENTS:
- Follow IMPLEMENTATION-PLAN.md exactly
- Size limit: {limit} lines
- Test coverage: {X}% minimum
- Update work-log.md every checkpoint

STARTUP REQUIREMENTS:
1. Print: "AGENT STARTUP: $(date '+%Y-%m-%d %H:%M:%S %Z')"
2. Verify pwd matches WORKING_DIR
3. Verify branch matches BRANCH
4. Acknowledge rules R054, R007, R013, R060, R017, R152

DELIVERABLES:
- Implementation complete
- Tests passing at required coverage
- Size under limit
- Work log updated
- Code committed and pushed
```

## Parallelization Matrix

---
### ‚ÑπÔ∏è RULE R053.0.0 - Parallelization Decisions
**Source:** rule-library/RULE-REGISTRY.md#R053
**Criticality:** INFO - Best practice

CAN PARALLELIZE:
- Independent efforts in same wave
- No shared dependencies
- Different code areas
- Sufficient resources

MUST SERIALIZE:
- Dependent efforts
- Shared file modifications
- ALL splits (never parallel)
- Resource-constrained operations
---

## Recording Spawn Times

```yaml
# Update in orchestrator-state.json
parallel_spawn_records:
  wave{X}_group{Y}:
    spawned_at: "2025-08-23T14:30:45Z"
    agents:
      - name: "sw-engineer-effort1"
        timestamp: "2025-08-23T14:30:47Z"
      - name: "sw-engineer-effort2"
        timestamp: "2025-08-23T14:30:49Z"
      - name: "sw-engineer-effort3"
        timestamp: "2025-08-23T14:30:51Z"
    deltas: [2, 2]
    average_delta: 2.0
    grade: "PASS"
```

## Common Spawn Patterns

### Pattern 1: Wave Start (All Planning)
```
Spawn all Code Reviewers for planning ‚Üí Wait ‚Üí Spawn all SW Engineers
```

### Pattern 2: Post-Implementation (All Reviews)
```
Spawn all Code Reviewers for review ‚Üí Process decisions ‚Üí Handle splits/fixes
```

### Pattern 3: Mixed Dependencies
```
Spawn independent efforts ‚Üí Monitor ‚Üí Spawn dependent efforts as prerequisites complete
```

## Grading Calculation

```python
def calculate_spawn_grade(timestamps):
    if len(timestamps) < 2:
        return "PASS"  # Single spawn
    
    deltas = []
    for i in range(1, len(timestamps)):
        delta = (timestamps[i] - timestamps[i-1]).total_seconds()
        deltas.append(delta)
    
    avg = sum(deltas) / len(deltas)
    grade = "PASS" if avg < 5.0 else "FAIL"
    
    print(f"Spawn Grade: {grade}")
    print(f"Average Delta: {avg:.2f}s (target: <5s)")
    
    return grade
```

---
### üî¥ RULE R254 - NO PARALLEL SPAWNING FOR SPLIT FIXES!
**Source:** rule-library/R254-sequential-split-fix-processing.md  
**Criticality:** BLOCKING - Parallel split fixes = AUTOMATIC FAILURE
**Used in states:** SPAWN_AGENTS (when spawning for fixes)

‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è **EXCEPTION TO R151: Split fixes MUST be sequential!** ‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è

When spawning SW Engineers to fix issues in splits:
- **DO NOT** apply parallel spawning rules
- **DO NOT** spawn multiple SW Engineers at once
- **MUST** process splits ONE AT A TIME
- **MUST** wait for each to complete before next

```bash
# ‚ùå WRONG: Parallel spawn for split fixes
if [ "$IS_SPLIT_FIX" = true ]; then
    for split in split1 split2 split3; do
        spawn_sw_engineer "$split" &  # NO! AUTOMATIC FAILURE!
    done
fi

# ‚úÖ CORRECT: Sequential spawn for split fixes
if [ "$IS_SPLIT_FIX" = true ]; then
    for split in split1 split2 split3; do
        echo "Processing split $split sequentially..."
        spawn_sw_engineer "$split"
        wait_for_completion "$split"
        echo "‚úÖ Split $split complete"
    done
fi
```

**Detection:**
The orchestrator MUST track whether spawning is for:
- Initial implementation ‚Üí Parallel OK (follow R151)
- Split fixes ‚Üí Sequential REQUIRED (follow R254)
```

## Handling Agent Error Reports (R254)

When agents report environment errors:

### If agent says "ORCHESTRATOR, YOU GAVE ME THE WRONG PROMPT!"
1. **READ THE ENTIRE ERROR MESSAGE** - They will echo your prompt back
2. **CHECK WHAT YOU SPECIFIED** vs what directory actually exists
3. **VERIFY INFRASTRUCTURE**:
   ```bash
   ls -la /efforts/phase${PHASE}/wave${WAVE}/
   ```
4. **RE-SPAWN WITH CORRECTED PATH**:
   ```
   TARGET_DIRECTORY: /efforts/phase1/wave1/core-api-types  # BE SPECIFIC!
   ```

### Common Issues and Fixes:
- **"Directory doesn't exist"** ‚Üí Run SETUP_EFFORT_INFRASTRUCTURE first
- **"Wrong branch"** ‚Üí Include project prefix in branch name
- **"Can't find IMPLEMENTATION-PLAN.md"** ‚Üí Ensure Code Reviewer completed planning
- **"Path not specified"** ‚Üí Always include explicit TARGET_DIRECTORY

### Recording Errors (R253 compliant):
```bash
# When agent reports error
yq -i ".agent_errors += [{\"agent\": \"sw-engineer\", \"effort\": \"$EFFORT\", \"error\": \"wrong directory\", \"time\": \"$(date -Iseconds)\"}]" orchestrator-state.json
git add orchestrator-state.json && git commit -m "state: agent error recorded [R253]" && git push
```

## State Transition

After spawning all required agents:
1. Update orchestrator-state.json with spawn records
2. Calculate and record grade
3. Check for immediate error reports
4. If errors, handle per R254 before transitioning
5. Transition to MONITOR state
