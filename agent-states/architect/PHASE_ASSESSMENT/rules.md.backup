# PHASE_ASSESSMENT State Rules

## Core Architecture Assessment Rules

┌─────────────────────────────────────────────────────────────────┐
│ RULE R071.0.0 - Phase Architectural Integrity Assessment       │
│ Source: rule-library/RULE-REGISTRY.md#R071                     │
├─────────────────────────────────────────────────────────────────┤
│ MANDATE: Architect must assess architectural integrity before   │
│ phase completion. Evaluate structural soundness, pattern        │
│ compliance, and integration readiness of all phase components.  │
│                                                                 │
│ CRITERIA:                                                       │
│ - KCP multi-tenancy pattern consistency                        │
│ - API design stability and backwards compatibility             │
│ - Resource hierarchy and namespace isolation                   │
│ - Controller pattern adherence                                 │
│ - Performance implications at enterprise scale                 │
└─────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────┐
│ RULE R072.0.0 - KCP Pattern Compliance Verification            │
│ Source: rule-library/RULE-REGISTRY.md#R072                     │
├─────────────────────────────────────────────────────────────────┤
│ MANDATE: Verify all phase implementations adhere to KCP        │
│ architectural patterns including logical clusters, workspace    │
│ isolation, and multi-tenancy constraints.                      │
│                                                                 │
│ VERIFICATION POINTS:                                            │
│ - LogicalCluster field presence in all CRDs                   │
│ - Workspace-aware controllers and indexing                     │
│ - ClusterRole vs Role usage patterns                          │
│ - Cross-workspace reference handling                          │
│ - Resource quota and limit enforcement                         │
└─────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────┐
│ RULE R073.0.0 - Phase Completion Prerequisites                 │
│ Source: rule-library/RULE-REGISTRY.md#R073                     │
├─────────────────────────────────────────────────────────────────┤
│ MANDATE: Before approving phase completion, verify all waves   │
│ are integrated, tested, and meet architectural standards.      │
│                                                                 │
│ PREREQUISITES:                                                  │
│ - All wave integration branches merged successfully            │
│ - No architectural debt or anti-patterns introduced           │
│ - API compatibility maintained with previous phases           │
│ - Performance benchmarks meet enterprise requirements         │
│ - Security posture maintained or improved                     │
└─────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────┐
│ RULE R037.0.0 - KCP Resource Pattern Enforcement               │
│ Source: rule-library/RULE-REGISTRY.md#R037                     │
├─────────────────────────────────────────────────────────────────┤
│ MANDATE: All Kubernetes resources must follow KCP multi-tenant │
│ patterns with proper workspace isolation and logical cluster   │
│ field usage.                                                   │
│                                                                 │
│ ENFORCEMENT AREAS:                                              │
│ - CRD schema includes LogicalCluster metadata                 │
│ - Controllers use workspace-scoped clients                    │
│ - RBAC follows least-privilege workspace boundaries           │
│ - Resource names avoid cross-workspace conflicts              │
│ - Event handling respects workspace isolation                 │
└─────────────────────────────────────────────────────────────────┘

## State-Specific Context

### PHASE_ASSESSMENT State Purpose
This state is entered when a complete phase (containing multiple waves) needs architectural review before transitioning to the next phase. The architect evaluates system-wide consistency, integration quality, and readiness for next phase work.

### State Transitions

**ENTRY CONDITIONS:**
- All waves in current phase marked as `WAVE_COMPLETE`
- Phase integration branch created and tested
- Orchestrator requests phase assessment

**EXIT CONDITIONS:**
- **ON_TRACK**: Phase meets all architectural standards → Continue to next phase
- **NEEDS_CORRECTION**: Minor issues identified → Return specific fixes to orchestrator
- **OFF_TRACK**: Major architectural problems → Halt progression, require redesign

**STATE TRANSITION FLOW:**
```
PHASE_ASSESSMENT → [Assessment Complete] → Decision State
├─ ON_TRACK → Next Phase Planning
├─ NEEDS_CORRECTION → Fix Cycle (return to orchestrator)
└─ OFF_TRACK → Architecture Redesign Required
```

## Assessment Criteria Matrix

| Area | Critical | Important | Nice-to-Have |
|------|----------|-----------|--------------|
| KCP Pattern Compliance | 100% | - | - |
| API Backwards Compatibility | 100% | - | - |
| Multi-tenancy Isolation | 100% | - | - |
| Performance at Scale | - | 95% | - |
| Code Quality Metrics | - | 90% | 100% |
| Documentation Coverage | - | 85% | 95% |

## Architecture Decision Requirements

### MUST ASSESS:
1. **Structural Integrity**: Are all components properly integrated?
2. **Pattern Consistency**: Do implementations follow KCP patterns uniformly?
3. **Scalability**: Will the phase handle enterprise-scale workloads?
4. **Security Posture**: Are multi-tenancy boundaries secure?
5. **API Stability**: Are APIs ready for production consumption?

### MUST DOCUMENT:
- Architecture decision record for phase approval/rejection
- Specific issues requiring correction (if NEEDS_CORRECTION)
- Performance benchmark results and analysis
- Security assessment findings
- Integration test results summary

### CRITICAL FAILURE CONDITIONS:
- **IMMEDIATE OFF_TRACK**: Security vulnerabilities, data leakage between workspaces
- **IMMEDIATE OFF_TRACK**: Breaking changes to public APIs without migration path
- **IMMEDIATE OFF_TRACK**: KCP pattern violations that break multi-tenancy