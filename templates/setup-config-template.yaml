# Software Factory 2.0 Setup Configuration Template
# This file allows non-interactive setup when passed with --config flag
# Example: ./setup.sh --config setup-config.yaml
#
# INSTRUCTIONS:
# 1. Copy this template to your project directory
# 2. Fill in all required fields (marked as Required)
# 3. Adjust optional fields as needed
# 4. Run setup with: ./setup.sh --config your-config.yaml

# =============================================================================
# PROJECT INFORMATION (Step 1)
# =============================================================================
project:
  # REQUIRED: Project name (will be used for branch prefixes)
  # Example: "idpbuilder-oci-mgmt" becomes prefix for branches
  name: "PROJECT_NAME_HERE"

  # OPTIONAL: Project description (helps with documentation)
  description: "Brief description of what this project does"

  # REQUIRED: Absolute path where to create SF instance
  # Example: "/workspaces/my-project" or "/home/user/projects/my-project"
  target_dir: "/absolute/path/to/software-factory-instance"

  # OPTIONAL: GitHub repository URL for the SF instance itself
  # This is NOT the target repository - see target_repository section
  github_url: "https://github.com/ORG/REPO"

# =============================================================================
# TARGET REPOSITORY (Step 1.5)
# This is the actual project repository that agents will work on
# CRITICAL: This is separate from the SF instance repository!
# =============================================================================
target_repository:
  # REQUIRED: Repository URL to clone and work on
  # Can be HTTPS or SSH format
  url: "https://github.com/OWNER/TARGET-REPO.git"

  # REQUIRED: Default branch to work from (usually main or master)
  base_branch: "main"

  # OPTIONAL: Fork URL if working on a fork
  # If specified, agents push to fork and create PRs to upstream
  fork_url: ""

  # REQUIRED: Clone depth for checkout (0 for full history)
  # Recommended: 100 for faster clones, 0 if you need full history
  clone_depth: 100

  # REQUIRED: Authentication method
  # Options: "https", "ssh", "token"
  auth_method: "https"

# =============================================================================
# TECHNOLOGY STACK (Step 2)
# =============================================================================
technology:
  # REQUIRED: Primary programming language
  # Options: Go, Python, TypeScript, Java, Rust, C++, or custom
  primary_language: "Go"

  # CONDITIONAL: Frameworks (depends on language choice)
  # For predefined languages, choose from available frameworks:
  # - Go: Kubernetes/KCP, Gin Web Framework, GORM, Cobra CLI, gRPC, Prometheus
  # - Python: Django, FastAPI, Flask, SQLAlchemy, Celery, PyTorch, NumPy/Pandas
  # - TypeScript: React, Next.js, Node.js/Express, NestJS, Vue.js, Angular
  # - Java: Spring Boot, Hibernate, Apache Kafka, JUnit, Maven/Gradle
  # - Rust: Tokio, Actix Web, Diesel, Rocket, Serde
  # - C++: Qt, Boost, POCO, gRPC, OpenCV
  frameworks:
    - "Framework1"
    - "Framework2"
    - "Framework3"

  # ALTERNATIVE: For custom language, provide as comma-separated string
  # frameworks_custom: "CustomFramework1, CustomFramework2, CustomFramework3"

# =============================================================================
# AGENT CONFIGURATION (Step 3)
# =============================================================================
agents:
  # REQUIRED: List agents to include (Orchestrator is always included)
  # Available agents:
  # - "Software Engineer" (implements code)
  # - "Code Reviewer" (reviews and validates)
  # - "Architect" (designs and oversees)
  selected:
    - "Software Engineer"
    - "Code Reviewer"
    - "Architect"

  # OPTIONAL: Expertise areas for agents
  # Predefined areas:
  # - Cloud Architecture, API Design, Testing Strategies, Security Best Practices,
  # - Performance Optimization, Database Design, Frontend Development, DevOps,
  # - Machine Learning, Distributed Systems
  expertise:
    - "Cloud Architecture"
    - "API Design"
    - "Testing Strategies"

  # ALTERNATIVE: Custom expertise areas
  # expertise_custom: "Domain Specific Knowledge, Custom Area 1, Custom Area 2"

# =============================================================================
# IMPLEMENTATION PLANNING (Step 4)
# =============================================================================
implementation:
  # REQUIRED: Plan generation strategy
  # Options:
  # - "generate" (AI generates plan based on parameters)
  # - "existing" (use your own plan file)
  # - "idpbuilder-example" (use built-in example)
  plan_type: "generate"

  # IF plan_type is "generate", provide these:
  # ==========================================
  # REQUIRED: Type of project being built
  # Common types:
  # - Kubernetes Controller/Operator
  # - Web API Service
  # - CLI Tool
  # - Library/SDK
  # - Data Pipeline
  # - Frontend Application
  project_type: "Kubernetes Controller/Operator"

  # REQUIRED: Estimated lines of code for entire project
  estimated_loc: 5000

  # REQUIRED: Number of implementation phases (typically 3-5)
  num_phases: 3

  # REQUIRED: Target test coverage percentage (minimum 70%)
  test_coverage: 80

  # IF plan_type is "existing", provide this:
  # ==========================================
  # existing_plan_path: "/path/to/your/implementation-plan.md"

  # IF plan_type is "idpbuilder-example":
  # ==========================================
  # No additional configuration needed

# =============================================================================
# DEVELOPMENT CONSTRAINTS (Step 5)
# =============================================================================
constraints:
  # REQUIRED: Maximum lines per effort (HARD LIMIT: 800)
  # Recommended: 600-700 for safety margin
  max_lines_per_effort: 700

  # REQUIRED: Maximum agents working in parallel
  # Consider your system resources (2-4 recommended)
  max_parallel_agents: 3

  # REQUIRED: Code review requirement
  # Options: "mandatory", "optional", "none"
  # STRONGLY RECOMMENDED: "mandatory" for quality
  code_review: "mandatory"

  # REQUIRED: Security level
  # 0 = Standard (basic security checks)
  # 1 = Enhanced (security scanning, OWASP checks)
  # 2 = Maximum (formal verification, threat modeling)
  security_level: 1

# =============================================================================
# TDD REQUIREMENTS (Test-Driven Development)
# =============================================================================
tdd:
  # REQUIRED: Enforce TDD methodology
  # true = Tests must be written BEFORE implementation
  # false = Tests can be written after (NOT RECOMMENDED)
  enforce_tdd: true

  # REQUIRED: Test-first validation
  # true = Verify tests exist before allowing implementation
  # false = Allow implementation without tests (NOT RECOMMENDED)
  require_tests_first: true

  # REQUIRED: Test types to require
  test_types:
    - "unit"        # Unit tests for individual functions
    - "integration" # Integration tests for components
    - "e2e"        # End-to-end tests for workflows
    - "performance" # Performance/load tests

  # REQUIRED: Minimum test coverage before merge
  min_coverage_before_merge: 80

# =============================================================================
# DIRECTORY HANDLING
# =============================================================================
directory_handling:
  # REQUIRED: What to do if target directory exists
  # Options:
  # - "backup" (rename existing to .backup-timestamp)
  # - "delete" (remove existing directory)
  # - "ask" (prompt user - only for interactive mode)
  if_exists: "backup"

  # REQUIRED: If parent directory doesn't exist
  # Options:
  # - "create" (create parent directories as needed)
  # - "fail" (abort if parent doesn't exist)
  # - "ask" (prompt user - only for interactive mode)
  create_parent: "create"

# =============================================================================
# ADDITIONAL OPTIONS
# =============================================================================
options:
  # OPTIONAL: Skip git initialization (default: false)
  skip_git_init: false

  # OPTIONAL: Skip adding git remote (default: false)
  skip_remote: false

  # OPTIONAL: Show detailed output during setup (default: true)
  verbose: true

  # OPTIONAL: Create line counter script for projects (default: true)
  # Automatically creates appropriate line counter for your language
  create_line_counter: true

  # OPTIONAL: Initialize with example data (default: false)
  # Creates sample implementation plans and configurations
  use_examples: false

  # OPTIONAL: Validation level (default: "strict")
  # Options: "strict", "moderate", "lenient"
  # Strict = All rules enforced, no violations allowed
  # Moderate = Warnings for minor violations
  # Lenient = Only critical violations block progress
  validation_level: "strict"

# =============================================================================
# NOTES AND BEST PRACTICES
# =============================================================================
# 1. Always use absolute paths for directories
# 2. Branch naming follows: [project-prefix]/phase[N]/wave[N]/effort-[name]
# 3. Keep effort sizes under 700 lines for safety (hard limit is 800)
# 4. Enable TDD for better code quality and fewer bugs
# 5. Use "mandatory" code review for production projects
# 6. Set appropriate security level based on project requirements
# 7. For CI/CD integration, use non-interactive mode with this config
# 8. Test coverage should be at least 70%, ideally 80%+
# 9. Use version control for this config file itself
# 10. Update config as project requirements evolve

# End of template - Save as setup-config.yaml and customize for your project